{"file_contents":{"design_guidelines.md":{"content":"# Real Estate Website Design Guidelines\n\n## Design Approach\n**Reference-Based Approach** - Drawing inspiration from leading real estate platforms like Zillow, Realtor.com, and Airbnb's property listings. This experience-focused approach prioritizes visual appeal and intuitive property discovery.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Light mode: 220 15% 25% (sophisticated navy blue)\n- Dark mode: 220 20% 85% (warm light gray)\n\n**Accent Colors:**\n- Success/Available: 142 76% 36% (forest green)\n- Price highlights: 14 87% 54% (warm orange)\n\n**Gradients:**\n- Hero overlays: Deep blue to transparent black\n- Property card hovers: Subtle white to light gray\n\n### Typography\n- **Headers:** Inter (600-700 weight)\n- **Body:** Inter (400-500 weight)\n- **Property prices:** Inter (600 weight, larger sizing)\n\n### Layout System\n**Spacing:** Consistent use of Tailwind units 2, 4, 6, 8, and 12\n- Small elements: p-2, m-4\n- Component spacing: gap-6, p-8\n- Section spacing: py-12\n\n### Component Library\n\n**Property Cards:**\n- Large property image with overlay details\n- Price prominently displayed\n- Key specs (beds/baths/sqft) as icons\n- Favorite/save functionality\n- Hover effects revealing additional info\n\n**Search & Filters:**\n- Prominent search bar with location autocomplete\n- Expandable filter panel (price, type, features)\n- Map/list view toggle\n- Sort options dropdown\n\n**Navigation:**\n- Clean header with logo, main nav, and user account\n- Sticky search bar on listing pages\n- Breadcrumb navigation for property details\n\n**Admin Panel:**\n- Sidebar navigation for admin functions\n- Property management table with quick actions\n- Form-based property editor with image upload\n- Analytics dashboard cards\n\n**Property Details:**\n- Image gallery with main hero image\n- Detailed specs grid\n- Interactive map\n- Contact agent form\n- Virtual tour integration placeholder\n\n## Images\n**Hero Image:** Large hero section featuring an aspirational property exterior or interior shot with gradient overlay for text readability.\n\n**Property Images:** High-quality photos emphasizing natural light, spacious rooms, and key selling features. Each property card shows primary exterior or interior hero shot.\n\n**Background Elements:** Subtle property-related patterns or textures for section breaks, city skyline silhouettes for location-based sections.\n\n## Key Design Principles\n1. **Visual Hierarchy:** Property prices and key features prominently displayed\n2. **Trust Building:** Professional photography, clear pricing, verified badges\n3. **Discovery Focus:** Easy filtering, visual property browsing, map integration\n4. **Mobile-First:** Touch-friendly property cards and simplified mobile navigation\n5. **Performance:** Optimized image loading with lazy loading for property galleries","size_bytes":2798},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Real Estate Platform\n\n## Overview\n\nA modern real estate web application built for property listings and management. The platform features a clean, intuitive interface inspired by leading real estate platforms like Zillow and Realtor.com, focusing on visual appeal and user experience. The application supports both property browsing for end users and administrative management for property listing operations.\n\n## Recent Changes\n\n### September 13, 2025 - Enhanced Property Features and Localization\n- **Car Spaces**: Added support for 1-4 car parking spaces selection in property forms and display\n- **Strong Points**: Implemented comma-separated list input for property highlights with bulleted list display\n- **Map Integration**: Added Google Maps embed URL field for interactive property location maps\n- **Database Migration**: Successfully migrated to Replit environment with PostgreSQL database and proper schema versioning\n- **Portuguese Localization**: Translated all property display text from English to Portuguese:\n  - \"Sale\" → \"Venda\", \"Rent\" → \"Aluguel\"\n  - \"Active\" → \"Ativo\", \"Pending\" → \"Pendente\", \"Sold\" → \"Vendido\"\n  - \"House\" → \"Casa\", \"Apartment\" → \"Apartamento\", \"Condo\" → \"Condomínio\"\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Comprehensive component library built on Radix UI primitives with shadcn/ui design system\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n### Backend Architecture\n- **Server**: Express.js with TypeScript support\n- **API Design**: RESTful API with property CRUD operations and filtering capabilities\n- **Database Layer**: Drizzle ORM for type-safe database operations\n- **Connection Pooling**: Neon serverless PostgreSQL with connection pooling\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL (configured for Neon serverless)\n- **Schema Management**: Drizzle migrations with schema versioning\n- **Data Models**: \n  - Properties with comprehensive attributes (price, location, amenities, images)\n  - Users for authentication and authorization\n  - Relationship modeling between users and properties\n\n### Component Architecture\n- **Design System**: Modular component library with consistent spacing (Tailwind units)\n- **Property Display**: Card-based layout with image galleries and detailed information\n- **Search & Filtering**: Advanced filtering panel with location, price range, and property type filters\n- **Admin Interface**: Comprehensive property management dashboard\n- **Responsive Design**: Mobile-first approach with breakpoint-specific layouts\n\n### Authentication and Authorization\n- **Session Management**: Connect-pg-simple for PostgreSQL session storage\n- **User Management**: Basic username/password authentication system\n- **Role-Based Access**: Separation between public property browsing and admin management\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL database hosting\n- **Connection Management**: WebSocket-based connections for serverless environments\n\n### UI and Styling\n- **Radix UI**: Comprehensive set of accessible, unstyled UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for rapid UI development\n- **shadcn/ui**: Pre-built component library with consistent design patterns\n- **Lucide React**: Icon library for consistent iconography\n\n### Development Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast bundling for production builds\n- **PostCSS**: CSS processing with Tailwind integration\n\n### Font and Asset Management\n- **Google Fonts**: Inter font family for typography consistency\n- **Asset Pipeline**: Vite-managed asset optimization and bundling\n\n### Query and Form Management\n- **TanStack Query**: Server state management, caching, and synchronization\n- **React Hook Form**: Performant form handling with minimal re-renders\n- **Zod**: TypeScript-first schema validation for forms and API contracts","size_bytes":4381},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4053},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"// Blueprint reference: javascript_database\nimport { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\nimport 'dotenv/config';\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle(pool, { schema });","size_bytes":446},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport 'dotenv/config';\n\n// Using Replit's built-in PostgreSQL database - no SSL config needed\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n  port,\n  host: \"0.0.0.0\",\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2136},"server/internalAuth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\nimport type { Express, RequestHandler } from \"express\";\nimport { storage } from \"./storage\";\nimport { loginSchema } from \"@shared/schema\";\n\n// Session configuration for internal auth using memory storage\nexport function getSession() {\n  const sessionSecret = process.env.SESSION_SECRET;\n  if (!sessionSecret && process.env.NODE_ENV === 'production') {\n    throw new Error('SESSION_SECRET environment variable is required in production');\n  }\n  if (!sessionSecret && process.env.NODE_ENV !== 'development') {\n    throw new Error('SESSION_SECRET environment variable is required');\n  }\n\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const MemoryStore = createMemoryStore(session);\n  const sessionStore = new MemoryStore({\n    checkPeriod: sessionTtl\n  });\n\n  const isProduction = process.env.NODE_ENV === 'production';\n  const isHttps = process.env.REPLIT_DOMAINS || process.env.NODE_ENV === 'production';\n\n  return session({\n    secret: sessionSecret || 'dev-secret-key-change-in-production',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: isHttps,\n      sameSite: 'lax',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\n// Hash password utility\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 10;\n  return bcrypt.hash(password, saltRounds);\n}\n\n// Verify password utility\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\n// Setup internal authentication\nexport async function setupInternalAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n\n  // Login endpoint\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validation = loginSchema.safeParse(req.body);\n      \n      if (!validation.success) {\n        return res.status(400).json({ \n          success: false, \n          error: 'Invalid login data',\n          details: validation.error.issues\n        });\n      }\n\n      const { username, password } = validation.data;\n      \n      // Find user by username\n      const user = await storage.getUserByUsername(username);\n      if (!user || !user.password) {\n        return res.status(401).json({ \n          success: false, \n          error: 'Invalid username or password' \n        });\n      }\n\n      // Verify password\n      const isValidPassword = await verifyPassword(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ \n          success: false, \n          error: 'Invalid username or password' \n        });\n      }\n\n      // Store user in session\n      (req.session as any).userId = user.id;\n      (req.session as any).user = {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n      };\n\n      res.json({ \n        success: true, \n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n        }\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Internal server error' \n      });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error('Logout error:', err);\n        return res.status(500).json({ \n          success: false, \n          error: 'Failed to logout' \n        });\n      }\n      res.json({ success: true, message: 'Logged out successfully' });\n    });\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/auth/user\", isAuthenticated, (req, res) => {\n    const user = (req.session as any).user;\n    res.json(user);\n  });\n}\n\n// Authentication middleware\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  const userId = (req.session as any)?.userId;\n  \n  if (!userId) {\n    return res.status(401).json({ \n      success: false, \n      error: 'Unauthorized - please login' \n    });\n  }\n\n  next();\n};","size_bytes":4327},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport createMemoryStore from \"memorystore\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  // Require strong session secret in production\n  const sessionSecret = process.env.SESSION_SECRET;\n  if (!sessionSecret && process.env.NODE_ENV === 'production') {\n    throw new Error('SESSION_SECRET environment variable is required in production');\n  }\n  if (!sessionSecret && process.env.NODE_ENV !== 'development') {\n    throw new Error('SESSION_SECRET environment variable is required');\n  }\n\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const MemoryStore = createMemoryStore(session);\n  const sessionStore = new MemoryStore({\n    checkPeriod: sessionTtl\n  });\n\n  // Determine if we're in production or have HTTPS\n  const isProduction = process.env.NODE_ENV === 'production';\n  const isHttps = process.env.REPLIT_DOMAINS || process.env.NODE_ENV === 'production';\n\n  return session({\n    secret: sessionSecret || 'dev-secret-key-change-in-production',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: isHttps, // Secure cookies in production or when using HTTPS\n      sameSite: 'lax', // CSRF protection\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    \n    // Persist updated tokens to session\n    (req as any).login(user, (err: any) => {\n      if (err) {\n        console.error('Error persisting refreshed tokens:', err);\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      return next();\n    });\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":5128},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage, type PropertyFilters } from \"./storage\";\nimport { \n  insertPropertySchema, \n  updatePropertySchema, \n  type Property \n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { setupInternalAuth, isAuthenticated } from \"./internalAuth\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Configure multer for file uploads\nconst multerStorage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadPath = path.join(process.cwd(), 'uploads/properties');\n    if (!fs.existsSync(uploadPath)) {\n      fs.mkdirSync(uploadPath, { recursive: true });\n    }\n    cb(null, uploadPath);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, `property-${uniqueSuffix}${path.extname(file.originalname)}`);\n  }\n});\n\nconst upload = multer({\n  storage: multerStorage,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Check if the file is an image\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup internal authentication\n  await setupInternalAuth(app);\n\n  // Serve static files for uploaded images (secure static file serving)\n  app.use('/uploads', express.static(path.join(process.cwd(), 'uploads'), { \n    fallthrough: false,\n    index: false,\n    redirect: false \n  }));\n\n  // Property routes - GET all properties with filtering\n  app.get(\"/api/properties\", async (req, res) => {\n    try {\n      const filters: PropertyFilters = {};\n      \n      // Extract query parameters\n      if (req.query.listingType) {\n        filters.listingType = req.query.listingType as 'sale' | 'rent';\n      }\n      if (req.query.propertyType) {\n        filters.propertyType = req.query.propertyType as string;\n      }\n      if (req.query.minPrice) {\n        filters.minPrice = Number(req.query.minPrice);\n      }\n      if (req.query.maxPrice) {\n        filters.maxPrice = Number(req.query.maxPrice);\n      }\n      if (req.query.minBeds) {\n        filters.minBeds = Number(req.query.minBeds);\n      }\n      if (req.query.minBaths) {\n        filters.minBaths = Number(req.query.minBaths);\n      }\n      if (req.query.city) {\n        filters.city = req.query.city as string;\n      }\n      if (req.query.state) {\n        filters.state = req.query.state as string;\n      }\n      if (req.query.featured !== undefined) {\n        filters.featured = req.query.featured === 'true';\n      }\n      if (req.query.status) {\n        filters.status = req.query.status as string;\n      }\n      if (req.query.limit) {\n        filters.limit = Number(req.query.limit);\n      }\n      if (req.query.offset) {\n        filters.offset = Number(req.query.offset);\n      }\n      if (req.query.sortBy) {\n        filters.sortBy = req.query.sortBy as 'price_asc' | 'price_desc' | 'newest' | 'oldest';\n      }\n\n      const properties = await storage.getProperties(filters);\n      res.json({ success: true, data: properties });\n    } catch (error) {\n      console.error('Error fetching properties:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to fetch properties' \n      });\n    }\n  });\n\n  // Property routes - Search properties\n  app.get(\"/api/properties/search\", async (req, res) => {\n    try {\n      const { q, ...filterParams } = req.query;\n      \n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ \n          success: false, \n          error: 'Search query (q) parameter is required' \n        });\n      }\n\n      const filters: PropertyFilters = {};\n      if (filterParams.listingType) {\n        filters.listingType = filterParams.listingType as 'sale' | 'rent';\n      }\n      if (filterParams.propertyType) {\n        filters.propertyType = filterParams.propertyType as string;\n      }\n      if (filterParams.limit) {\n        filters.limit = Number(filterParams.limit);\n      }\n\n      const properties = await storage.searchProperties(q, filters);\n      res.json({ success: true, data: properties });\n    } catch (error) {\n      console.error('Error searching properties:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to search properties' \n      });\n    }\n  });\n\n  // Property routes - GET single property\n  app.get(\"/api/properties/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const property = await storage.getProperty(id);\n      \n      if (!property) {\n        return res.status(404).json({ \n          success: false, \n          error: 'Property not found' \n        });\n      }\n\n      res.json({ success: true, data: property });\n    } catch (error) {\n      console.error('Error fetching property:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to fetch property' \n      });\n    }\n  });\n\n  // Property routes - CREATE property (protected)\n  app.post(\"/api/properties\", isAuthenticated, async (req, res) => {\n    try {\n      const validation = insertPropertySchema.safeParse(req.body);\n      \n      if (!validation.success) {\n        return res.status(400).json({ \n          success: false, \n          error: 'Invalid property data',\n          details: validation.error.issues\n        });\n      }\n\n      const property = await storage.createProperty(validation.data);\n      res.status(201).json({ success: true, data: property });\n    } catch (error) {\n      console.error('Error creating property:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to create property' \n      });\n    }\n  });\n\n  // Property routes - UPDATE property (protected)\n  app.put(\"/api/properties/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validation = updatePropertySchema.safeParse(req.body);\n      \n      if (!validation.success) {\n        return res.status(400).json({ \n          success: false, \n          error: 'Invalid property data',\n          details: validation.error.issues\n        });\n      }\n\n      const property = await storage.updateProperty(id, validation.data);\n      res.json({ success: true, data: property });\n    } catch (error) {\n      console.error('Error updating property:', error);\n      if (error instanceof Error && error.message.includes('not found')) {\n        return res.status(404).json({ \n          success: false, \n          error: 'Property not found' \n        });\n      }\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to update property' \n      });\n    }\n  });\n\n  // Property routes - DELETE property (protected)\n  app.delete(\"/api/properties/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteProperty(id);\n      res.json({ success: true, message: 'Property deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting property:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to delete property' \n      });\n    }\n  });\n\n  // Image upload endpoint for properties (protected)\n  app.post(\"/api/properties/upload-images\", isAuthenticated, (req, res, next) => {\n    upload.any()(req, res, (err) => {\n      if (err) {\n        console.error('Multer error:', err);\n        return res.status(400).json({ \n          success: false, \n          error: err.message || 'Failed to upload images' \n        });\n      }\n      next();\n    });\n  }, async (req, res) => {\n    try {\n      if (!req.files || !Array.isArray(req.files) || req.files.length === 0) {\n        return res.status(400).json({ \n          success: false, \n          error: 'No images uploaded' \n        });\n      }\n\n      const files = req.files as Express.Multer.File[];\n      const imageUrls = files.map(file => `/uploads/properties/${file.filename}`);\n\n      res.json({ \n        success: true, \n        data: {\n          imageUrls,\n          count: files.length\n        }\n      });\n    } catch (error) {\n      console.error('Error uploading images:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to upload images' \n      });\n    }\n  });\n\n  // Update property images endpoint (protected)\n  app.put(\"/api/properties/:id/images\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { images } = req.body;\n\n      if (!Array.isArray(images)) {\n        return res.status(400).json({ \n          success: false, \n          error: 'Images must be an array' \n        });\n      }\n\n      const property = await storage.updateProperty(id, { images });\n      res.json({ success: true, data: property });\n    } catch (error) {\n      console.error('Error updating property images:', error);\n      if (error instanceof Error && error.message.includes('not found')) {\n        return res.status(404).json({ \n          success: false, \n          error: 'Property not found' \n        });\n      }\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to update property images' \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":9393},"server/storage.ts":{"content":"// Blueprint reference: javascript_database\nimport { \n  users, \n  properties,\n  type User, \n  type InsertUser,\n  type Property,\n  type InsertProperty,\n  type UpdateProperty\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, like, and, or, gte, lte, desc, asc } from \"drizzle-orm\";\nimport { JsonStorage } from \"./jsonStorage\";\n\nexport interface IStorage {\n  // User methods for internal authentication\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<User>): Promise<User>;\n  \n  // Property methods\n  getProperties(filters?: PropertyFilters): Promise<Property[]>;\n  getProperty(id: string): Promise<Property | undefined>;\n  createProperty(property: InsertProperty): Promise<Property>;\n  updateProperty(id: string, updates: UpdateProperty): Promise<Property>;\n  deleteProperty(id: string): Promise<void>;\n  searchProperties(query: string, filters?: PropertyFilters): Promise<Property[]>;\n}\n\nexport interface PropertyFilters {\n  listingType?: 'sale' | 'rent';\n  propertyType?: string;\n  minPrice?: number;\n  maxPrice?: number;\n  minBeds?: number;\n  minBaths?: number;\n  city?: string;\n  state?: string;\n  featured?: boolean;\n  status?: string;\n  limit?: number;\n  offset?: number;\n  sortBy?: 'price_asc' | 'price_desc' | 'newest' | 'oldest';\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    \n    if (!user) {\n      throw new Error(`User with id ${id} not found`);\n    }\n    return user;\n  }\n\n  // Property methods\n  async getProperties(filters: PropertyFilters = {}): Promise<Property[]> {\n    let query = db.select().from(properties);\n    \n    const conditions = [];\n    \n    if (filters.listingType) {\n      conditions.push(eq(properties.listingType, filters.listingType));\n    }\n    \n    if (filters.propertyType) {\n      conditions.push(eq(properties.propertyType, filters.propertyType));\n    }\n    \n    if (filters.minPrice) {\n      conditions.push(gte(properties.price, filters.minPrice.toString()));\n    }\n    \n    if (filters.maxPrice) {\n      conditions.push(lte(properties.price, filters.maxPrice.toString()));\n    }\n    \n    if (filters.minBeds) {\n      conditions.push(gte(properties.bedrooms, filters.minBeds));\n    }\n    \n    if (filters.minBaths) {\n      conditions.push(gte(properties.bathrooms, filters.minBaths));\n    }\n    \n    if (filters.city) {\n      conditions.push(like(properties.city, `%${filters.city}%`));\n    }\n    \n    if (filters.state) {\n      conditions.push(eq(properties.state, filters.state));\n    }\n    \n    if (filters.featured !== undefined) {\n      conditions.push(eq(properties.featured, filters.featured));\n    }\n    \n    if (filters.status) {\n      conditions.push(eq(properties.status, filters.status));\n    } else {\n      // Default to active properties only\n      conditions.push(eq(properties.status, 'active'));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    // Sorting\n    switch (filters.sortBy) {\n      case 'price_asc':\n        query = query.orderBy(asc(properties.price));\n        break;\n      case 'price_desc':\n        query = query.orderBy(desc(properties.price));\n        break;\n      case 'oldest':\n        query = query.orderBy(asc(properties.createdAt));\n        break;\n      case 'newest':\n      default:\n        query = query.orderBy(desc(properties.createdAt));\n        break;\n    }\n\n    // Pagination\n    if (filters.limit) {\n      query = query.limit(filters.limit);\n    }\n    if (filters.offset) {\n      query = query.offset(filters.offset);\n    }\n\n    return await query;\n  }\n\n  async getProperty(id: string): Promise<Property | undefined> {\n    const [property] = await db.select().from(properties).where(eq(properties.id, id));\n    return property || undefined;\n  }\n\n  async createProperty(insertProperty: InsertProperty): Promise<Property> {\n    const [property] = await db\n      .insert(properties)\n      .values({\n        ...insertProperty,\n        updatedAt: new Date()\n      })\n      .returning();\n    return property;\n  }\n\n  async updateProperty(id: string, updates: UpdateProperty): Promise<Property> {\n    const [property] = await db\n      .update(properties)\n      .set({\n        ...updates,\n        updatedAt: new Date()\n      })\n      .where(eq(properties.id, id))\n      .returning();\n    \n    if (!property) {\n      throw new Error(`Property with id ${id} not found`);\n    }\n    \n    return property;\n  }\n\n  async deleteProperty(id: string): Promise<void> {\n    await db.delete(properties).where(eq(properties.id, id));\n  }\n\n  async searchProperties(query: string, filters: PropertyFilters = {}): Promise<Property[]> {\n    const searchConditions = [\n      like(properties.title, `%${query}%`),\n      like(properties.description, `%${query}%`),\n      like(properties.location, `%${query}%`),\n      like(properties.city, `%${query}%`),\n      like(properties.address, `%${query}%`)\n    ];\n\n    const filterConditions = [];\n    \n    if (filters.listingType) {\n      filterConditions.push(eq(properties.listingType, filters.listingType));\n    }\n    \n    if (filters.propertyType) {\n      filterConditions.push(eq(properties.propertyType, filters.propertyType));\n    }\n    \n    // Default to active properties\n    filterConditions.push(eq(properties.status, 'active'));\n\n    let dbQuery = db.select().from(properties);\n    \n    if (searchConditions.length > 0 || filterConditions.length > 0) {\n      const allConditions = [];\n      \n      if (searchConditions.length > 0) {\n        // Use OR for search terms so any field can match\n        allConditions.push(or(...searchConditions));\n      }\n      \n      if (filterConditions.length > 0) {\n        allConditions.push(and(...filterConditions));\n      }\n      \n      dbQuery = dbQuery.where(and(...allConditions));\n    }\n\n    dbQuery = dbQuery.orderBy(desc(properties.featured), desc(properties.createdAt));\n\n    if (filters.limit) {\n      dbQuery = dbQuery.limit(filters.limit);\n    }\n\n    return await dbQuery;\n  }\n}\n\nexport const storage = new JsonStorage();\n","size_bytes":6885},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, index, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for internal authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  email: varchar(\"email\").unique(),\n  password: varchar(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default('user'), // user, admin\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const properties = pgTable(\"properties\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 12, scale: 2 }).notNull(),\n  location: text(\"location\").notNull(),\n  address: text(\"address\"),\n  city: text(\"city\").notNull(),\n  state: text(\"state\").notNull(),\n  zipCode: text(\"zip_code\"),\n  propertyType: text(\"property_type\").notNull(), // house, apartment, condo, townhouse, villa\n  listingType: text(\"listing_type\").notNull(), // sale, rent\n  bedrooms: integer(\"bedrooms\").notNull(),\n  bathrooms: integer(\"bathrooms\").notNull(),\n  sqft: integer(\"sqft\").notNull(),\n  parking: integer(\"parking\").default(0),\n  yearBuilt: integer(\"year_built\"),\n  lotSize: decimal(\"lot_size\", { precision: 10, scale: 2 }),\n  images: text(\"images\").array().default(sql`'{}'::text[]`),\n  amenities: text(\"amenities\").array().default(sql`'{}'::text[]`),\n  carSpaces: integer(\"car_spaces\").default(1), // 1, 2, 3, or 4 car spaces\n  strongPoints: text(\"strong_points\").array().default(sql`'{}'::text[]`), // list of property strong points\n  iptu: decimal(\"iptu\", { precision: 10, scale: 2 }), // Brazilian property tax (IPTU)\n  mapEmbedUrl: text(\"map_embed_url\"), // embed map URL for the property\n  featured: boolean(\"featured\").default(false),\n  status: text(\"status\").notNull().default('active'), // active, pending, sold, inactive\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const userRelations = relations(users, ({ many }) => ({\n  properties: many(properties),\n}));\n\nexport const propertyRelations = relations(properties, ({ one }) => ({\n  createdBy: one(users, { \n    fields: [properties.id], \n    references: [users.id] \n  }),\n}));\n\n// User schemas for internal authentication\nexport type InsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Login schema\nexport const loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport type LoginCredentials = z.infer<typeof loginSchema>;\n\n// Property schemas\nexport const insertPropertySchema = createInsertSchema(properties).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updatePropertySchema = insertPropertySchema.partial();\n\nexport type InsertProperty = z.infer<typeof insertPropertySchema>;\nexport type UpdateProperty = z.infer<typeof updatePropertySchema>;\nexport type Property = typeof properties.$inferSelect;\n","size_bytes":3747},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport HomePage from \"@/pages/HomePage\";\nimport AdminPage from \"@/pages/AdminPage\";\nimport PropertyDetailPage from \"@/pages/PropertyDetailPage\";\nimport LoginPage from \"@/pages/LoginPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/property/:id\" component={PropertyDetailPage} />\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1143},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 220 15% 25%;\n\n  --border: 0 0% 90%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 220 15% 25%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 220 15% 25%;\n\n  --sidebar-border: 0 0% 92%;\n\n  --sidebar-primary: 220 15% 25%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 92%;\n\n  --sidebar-accent-foreground: 220 15% 25%;\n\n  --sidebar-ring: 220 15% 25%;\n\n  --popover: 0 0% 95%;\n\n  --popover-foreground: 220 15% 25%;\n\n  --popover-border: 0 0% 90%;\n\n  --primary: 220 15% 25%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 92%;\n\n  --secondary-foreground: 220 15% 25%;\n\n  --muted: 0 0% 94%;\n\n  --muted-foreground: 220 8% 46%;\n\n  --accent: 220 8% 94%;\n\n  --accent-foreground: 220 15% 25%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 80%;\n  --ring: 220 15% 25%;\n  --chart-1: 220 15% 25%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 14 87% 54%;\n  --chart-4: 262 83% 58%;\n  --chart-5: 199 89% 48%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 15% 25% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 15% 25% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 15% 25% / 0.00), 0px 1px 2px -1px hsl(220 15% 25% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 15% 25% / 0.00), 0px 1px 2px -1px hsl(220 15% 25% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 15% 25% / 0.00), 0px 2px 4px -1px hsl(220 15% 25% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 15% 25% / 0.00), 0px 4px 6px -1px hsl(220 15% 25% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 15% 25% / 0.00), 0px 8px 10px -1px hsl(220 15% 25% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 15% 25% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 9%;\n\n  --foreground: 220 20% 85%;\n\n  --border: 220 13% 18%;\n\n  --card: 220 15% 12%;\n\n  --card-foreground: 220 20% 85%;\n\n  --card-border: 220 13% 20%;\n\n  --sidebar: 220 15% 7%;\n\n  --sidebar-foreground: 220 20% 85%;\n\n  --sidebar-border: 220 13% 15%;\n\n  --sidebar-primary: 220 20% 85%;\n\n  --sidebar-primary-foreground: 220 15% 9%;\n\n  --sidebar-accent: 220 13% 15%;\n\n  --sidebar-accent-foreground: 220 20% 85%;\n\n  --sidebar-ring: 220 20% 85%;\n\n  --popover: 220 15% 15%;\n\n  --popover-foreground: 220 20% 85%;\n\n  --popover-border: 220 13% 22%;\n\n  --primary: 220 20% 85%;\n\n  --primary-foreground: 220 15% 9%;\n\n  --secondary: 220 13% 18%;\n\n  --secondary-foreground: 220 20% 85%;\n\n  --muted: 220 13% 13%;\n\n  --muted-foreground: 220 10% 60%;\n\n  --accent: 220 13% 13%;\n\n  --accent-foreground: 220 20% 85%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 220 15% 9%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 220 13% 25%;\n  --ring: 220 20% 85%;\n  --chart-1: 220 20% 85%;\n  --chart-2: 142 76% 65%;\n  --chart-3: 14 87% 70%;\n  --chart-4: 262 83% 75%;\n  --chart-5: 199 89% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 15% 9% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 15% 9% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 15% 9% / 0.00), 0px 1px 2px -1px hsl(220 15% 9% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 15% 9% / 0.00), 0px 1px 2px -1px hsl(220 15% 9% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 15% 9% / 0.00), 0px 2px 4px -1px hsl(220 15% 9% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 15% 9% / 0.00), 0px 4px 6px -1px hsl(220 15% 9% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 15% 9% / 0.00), 0px 8px 10px -1px hsl(220 15% 9% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 15% 9% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10003},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminPanel.tsx":{"content":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Upload, \n  Home, \n  DollarSign,\n  Users,\n  TrendingUp,\n  Loader2\n} from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Property, InsertProperty } from \"@shared/schema\";\n\nexport default function AdminPanel() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingProperty, setEditingProperty] = useState<Property | null>(null);\n  const [selectedImages, setSelectedImages] = useState<File[]>([]);\n  const [imageUrls, setImageUrls] = useState<string[]>([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const [formData, setFormData] = useState({\n    title: \"\",\n    price: \"\",\n    city: \"\",\n    state: \"\",\n    propertyType: \"house\",\n    listingType: \"sale\",\n    bedrooms: \"1\",\n    bathrooms: \"1\", \n    sqft: \"\",\n    description: \"\",\n    carSpaces: \"1\",\n    strongPoints: \"\",\n    mapEmbedUrl: \"\",\n    iptu: \"\"\n  });\n  const { toast } = useToast();\n\n  // Fetch properties\n  const { data: apiResponse, isLoading, refetch } = useQuery({\n    queryKey: ['/api/properties?limit=100']\n  });\n\n  const properties = (apiResponse as any)?.data || [];\n\n  const stats = [\n    { icon: Home, label: \"Total de propriedades\", value: properties.length, color: \"text-chart-1\" },\n    { icon: DollarSign, label: \"Propriedades ativas\", value: properties.filter((p: Property) => p.status === 'active').length, color: \"text-chart-2\" },\n    { icon: Users, label: \"Vendas pendentes\", value: properties.filter((p: Property) => p.status === 'pending').length, color: \"text-chart-3\" },\n    { icon: TrendingUp, label: \"Vendidas este mês\", value: properties.filter((p: Property) => p.status === 'sold').length, color: \"text-chart-4\" }\n  ];\n\n  // Create property mutation\n  const createMutation = useMutation({\n    mutationFn: (data: InsertProperty) => apiRequest('POST', '/api/properties', data).then(res => res.json()),\n    onSuccess: () => {\n      toast({ title: \"Property created successfully\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/properties'] });\n      setIsAddDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error creating property\", \n        description: error?.message || \"Failed to create property\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Update property mutation\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertProperty> }) => \n      apiRequest('PUT', `/api/properties/${id}`, data).then(res => res.json()),\n    onSuccess: () => {\n      toast({ title: \"Property updated successfully\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/properties'] });\n      setIsEditDialogOpen(false);\n      setEditingProperty(null);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error updating property\", \n        description: error?.message || \"Failed to update property\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Delete property mutation\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/properties/${id}`).then(res => res.json()),\n    onSuccess: () => {\n      toast({ title: \"Property deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/properties'] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error deleting property\",\n        description: error?.message || \"Failed to delete property\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      price: \"\",\n      city: \"\",\n      state: \"\",\n      propertyType: \"house\",\n      listingType: \"sale\",\n      bedrooms: \"1\",\n      bathrooms: \"1\",\n      sqft: \"\",\n      description: \"\",\n      carSpaces: \"1\",\n      strongPoints: \"\",\n      mapEmbedUrl: \"\",\n      iptu: \"\"\n    });\n    setSelectedImages([]);\n    setImageUrls([]);\n  };\n\n  const uploadImages = async (): Promise<string[]> => {\n    if (selectedImages.length === 0) return imageUrls;\n    \n    setIsUploading(true);\n    try {\n      const formData = new FormData();\n      selectedImages.forEach(file => {\n        formData.append('images', file);\n      });\n\n      const response = await apiRequest('POST', '/api/properties/upload-images', formData);\n      const result = await response.json();\n      \n      if (result.success) {\n        const newUrls = [...imageUrls, ...result.data.imageUrls];\n        setImageUrls(newUrls);\n        setSelectedImages([]);\n        return newUrls;\n      } else {\n        throw new Error(result.error || 'Failed to upload images');\n      }\n    } catch (error) {\n      console.error('Error uploading images:', error);\n      toast({\n        title: \"Error uploading images\",\n        description: error instanceof Error ? error.message : \"Failed to upload images\",\n        variant: \"destructive\"\n      });\n      return imageUrls;\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleAddProperty = async () => {\n    const uploadedImageUrls = await uploadImages();\n    \n    const strongPointsArray = formData.strongPoints\n      ? formData.strongPoints.split(',').map(point => point.trim()).filter(point => point.length > 0)\n      : [];\n    \n    const propertyData: InsertProperty = {\n      title: formData.title,\n      price: formData.price, // Keep as string since schema expects decimal as string\n      location: `${formData.city}, ${formData.state}`,\n      city: formData.city,\n      state: formData.state,\n      propertyType: formData.propertyType,\n      listingType: formData.listingType as 'sale' | 'rent',\n      bedrooms: parseInt(formData.bedrooms),\n      bathrooms: parseInt(formData.bathrooms),\n      sqft: parseInt(formData.sqft),\n      description: formData.description || null,\n      images: uploadedImageUrls,\n      carSpaces: parseInt(formData.carSpaces),\n      strongPoints: strongPointsArray,\n      mapEmbedUrl: formData.mapEmbedUrl || null,\n      iptu: formData.iptu || null\n    };\n\n    createMutation.mutate(propertyData);\n  };\n\n  const handleEditProperty = (property: Property) => {\n    setEditingProperty(property);\n    setFormData({\n      title: property.title,\n      price: property.price.toString(),\n      city: property.city,\n      state: property.state,\n      propertyType: property.propertyType,\n      listingType: property.listingType,\n      bedrooms: property.bedrooms.toString(),\n      bathrooms: property.bathrooms.toString(),\n      sqft: property.sqft.toString(),\n      description: property.description || \"\",\n      carSpaces: (property.carSpaces || 1).toString(),\n      strongPoints: (property.strongPoints || []).join(', '),\n      mapEmbedUrl: property.mapEmbedUrl || \"\",\n      iptu: property.iptu?.toString() || \"\"\n    });\n    setImageUrls(property.images || []);\n    setSelectedImages([]);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateProperty = async () => {\n    if (!editingProperty) return;\n    \n    const uploadedImageUrls = await uploadImages();\n    \n    const strongPointsArray = formData.strongPoints\n      ? formData.strongPoints.split(',').map(point => point.trim()).filter(point => point.length > 0)\n      : [];\n    \n    const propertyData: Partial<InsertProperty> = {\n      title: formData.title,\n      price: formData.price,\n      location: `${formData.city}, ${formData.state}`,\n      city: formData.city,\n      state: formData.state,\n      propertyType: formData.propertyType,\n      listingType: formData.listingType as 'sale' | 'rent',\n      bedrooms: parseInt(formData.bedrooms),\n      bathrooms: parseInt(formData.bathrooms),\n      sqft: parseInt(formData.sqft),\n      description: formData.description || null,\n      images: uploadedImageUrls,\n      carSpaces: parseInt(formData.carSpaces),\n      strongPoints: strongPointsArray,\n      mapEmbedUrl: formData.mapEmbedUrl || null,\n      iptu: formData.iptu || null\n    };\n\n    updateMutation.mutate({ id: editingProperty.id, data: propertyData });\n  };\n\n  const handleDeleteProperty = (id: string) => {\n    deleteMutation.mutate(id);\n  };\n\n  const handleImageSelection = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    const imageFiles = files.filter(file => file.type.startsWith('image/'));\n    \n    if (imageFiles.length !== files.length) {\n      toast({\n        title: \"Some files were ignored\",\n        description: \"Only image files are allowed\",\n        variant: \"destructive\"\n      });\n    }\n    \n    setSelectedImages(prev => [...prev, ...imageFiles]);\n  };\n\n  const handleDragOver = (event: React.DragEvent) => {\n    event.preventDefault();\n  };\n\n  const handleDrop = (event: React.DragEvent) => {\n    event.preventDefault();\n    const files = Array.from(event.dataTransfer.files);\n    const imageFiles = files.filter(file => file.type.startsWith('image/'));\n    \n    if (imageFiles.length !== files.length) {\n      toast({\n        title: \"Some files were ignored\",\n        description: \"Only image files are allowed\",\n        variant: \"destructive\"\n      });\n    }\n    \n    setSelectedImages(prev => [...prev, ...imageFiles]);\n  };\n\n  const removeImage = (index: number, isUrl: boolean = false) => {\n    if (isUrl) {\n      setImageUrls(prev => prev.filter((_, i) => i !== index));\n    } else {\n      setSelectedImages(prev => prev.filter((_, i) => i !== index));\n    }\n  };\n\n  const ImageUploadComponent = ({ testIdPrefix }: { testIdPrefix: string }) => {\n    const fileInputRef = React.useRef<HTMLInputElement>(null);\n    \n    return (\n      <div className=\"space-y-2\">\n        <Label>Imagens do imóvel</Label>\n        <div \n          className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center cursor-pointer hover:border-muted-foreground/50 transition-colors\"\n          onDragOver={handleDragOver}\n          onDrop={handleDrop}\n          onClick={() => fileInputRef.current?.click()}\n        >\n          <Upload className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            Arraste e solte as imagens aqui, ou clique para procurar\n          </p>\n          <Button type=\"button\" variant=\"outline\" size=\"sm\" data-testid={`button-${testIdPrefix}-upload-images`}>\n            Selecione os arquivos\n          </Button>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            multiple\n            className=\"hidden\"\n            onChange={handleImageSelection}\n          />\n        </div>\n        \n        {/* Image Preview */}\n        {(imageUrls.length > 0 || selectedImages.length > 0) && (\n          <div className=\"grid grid-cols-3 gap-2 mt-4\">\n            {/* Existing images (URLs) */}\n            {imageUrls.map((url, index) => (\n              <div key={`url-${index}`} className=\"relative group\">\n                <img\n                  src={url}\n                  alt={`Property image ${index + 1}`}\n                  className=\"w-full h-24 object-cover rounded border\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    removeImage(index, true);\n                  }}\n                  className=\"absolute top-1 right-1 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity\"\n                >\n                  ×\n                </button>\n              </div>\n            ))}\n            \n            {/* New selected images (Files) */}\n            {selectedImages.map((file, index) => {\n              const url = URL.createObjectURL(file);\n              return (\n                <div key={`file-${index}`} className=\"relative group\">\n                  <img\n                    src={url}\n                    alt={`New image ${index + 1}`}\n                    className=\"w-full h-24 object-cover rounded border\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      removeImage(index, false);\n                      URL.revokeObjectURL(url);\n                    }}\n                    className=\"absolute top-1 right-1 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity\"\n                  >\n                    ×\n                  </button>\n                  <div className=\"absolute bottom-1 left-1 bg-blue-500 text-white text-xs px-1 rounded\">\n                    New\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n        \n        {isUploading && (\n          <div className=\"flex items-center justify-center p-4\">\n            <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n            <span className=\"text-sm\">Uploading images...</span>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'default';\n      case 'pending': return 'secondary';\n      case 'sold': return 'destructive';\n      default: return 'default';\n    }\n  };\n\n  const translateStatus = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"Ativo\";\n      case \"pending\":\n        return \"Pendente\";\n      case \"sold\":\n        return \"Vendido\";\n      case \"inactive\":\n        return \"Inativo\";\n      default:\n        return status;\n    }\n  };\n\n  const translateListingType = (listingType: string) => {\n    switch (listingType) {\n      case \"sale\":\n        return \"Venda\";\n      case \"rent\":\n        return \"Aluguel\";\n      default:\n        return listingType;\n    }\n  };\n\n  const translatePropertyType = (propertyType: string) => {\n    switch (propertyType) {\n      case \"house\":\n        return \"Casa\";\n      case \"apartment\":\n        return \"Apartamento\";\n      case \"condo\":\n        return \"Condomínio\";\n      case \"townhouse\":\n        return \"Sobrado\";\n      case \"villa\":\n        return \"Vila\";\n      default:\n        return propertyType;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\"> DashAdminboard</h1>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-property\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Adicionar Imóvel\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Adicionar Imóvel</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Título do Imóvel</Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => handleInputChange('title', e.target.value)}\n                    placeholder=\"Linda casa a venda em Rio de Janeiro\"\n                    data-testid=\"input-title\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"price\">Preço</Label>\n                  <Input\n                    id=\"price\"\n                    value={formData.price}\n                    onChange={(e) => handleInputChange('price', e.target.value)}\n                    placeholder=\"R$ 1.250,00\"\n                    data-testid=\"input-price\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"city\">Cidade</Label>\n                  <Input\n                    id=\"city\"\n                    value={formData.city}\n                    onChange={(e) => handleInputChange('city', e.target.value)}\n                    placeholder=\"Rio de Janeiro\"\n                    data-testid=\"input-city\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"state\">Endereço</Label>\n                  <Input\n                    id=\"state\"\n                    value={formData.state}\n                    onChange={(e) => handleInputChange('state', e.target.value)}\n                    placeholder=\"Avenida das Américas, 3500\"\n                    data-testid=\"input-state\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Tipo de propriedade</Label>\n                  <Select \n                    value={formData.propertyType}\n                    onValueChange={(value) => handleInputChange('propertyType', value)}\n                  >\n                    <SelectTrigger data-testid=\"select-property-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"house\">Casa</SelectItem>\n                      <SelectItem value=\"apartment\">Apartamento</SelectItem>\n                      <SelectItem value=\"condo\">Loja Comercial</SelectItem>\n                      <SelectItem value=\"townhouse\">Condomínio</SelectItem>\n                      <SelectItem value=\"villa\">Casa em Vila</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Tipo</Label>\n                  <Select \n                    value={formData.listingType}\n                    onValueChange={(value) => handleInputChange('listingType', value)}\n                  >\n                    <SelectTrigger data-testid=\"select-listing-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"sale\">Venda</SelectItem>\n                      <SelectItem value=\"rent\">Aluguel</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"sqft\">Metros Quadrados</Label>\n                  <Input\n                    id=\"sqft\"\n                    value={formData.sqft}\n                    onChange={(e) => handleInputChange('sqft', e.target.value)}\n                    placeholder=\"80\"\n                    type=\"number\"\n                    data-testid=\"input-sqft\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Quartos</Label>\n                  <Select \n                    value={formData.bedrooms}\n                    onValueChange={(value) => handleInputChange('bedrooms', value)}\n                  >\n                    <SelectTrigger data-testid=\"select-beds\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 Quarto</SelectItem>\n                      <SelectItem value=\"2\">2 Quartos</SelectItem>\n                      <SelectItem value=\"3\">3 Quartos</SelectItem>\n                      <SelectItem value=\"4\">4 Quartos</SelectItem>\n                      <SelectItem value=\"5\">5+ Quartos</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Banheiros</Label>\n                  <Select \n                    value={formData.bathrooms}\n                    onValueChange={(value) => handleInputChange('bathrooms', value)}\n                  >\n                    <SelectTrigger data-testid=\"select-baths\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 Banheiro</SelectItem>\n                      <SelectItem value=\"2\">2 Banheiros</SelectItem>\n                      <SelectItem value=\"3\">3 Banheiros</SelectItem>\n                      <SelectItem value=\"4\">4+ Banheiros</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Descrição</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange('description', e.target.value)}\n                  placeholder=\"Descreva a propriedade colocando seus principais pontos fortes.\"\n                  rows={3}\n                  data-testid=\"textarea-description\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Vagas de Carro</Label>\n                <Select \n                  value={formData.carSpaces}\n                  onValueChange={(value) => handleInputChange('carSpaces', value)}\n                >\n                  <SelectTrigger data-testid=\"select-car-spaces\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1\">1 Vaga</SelectItem>\n                    <SelectItem value=\"2\">2 Vagas</SelectItem>\n                    <SelectItem value=\"3\">3 Vagas</SelectItem>\n                    <SelectItem value=\"4\">4 Vagas</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"strongPoints\">Pontos Fortes</Label>\n                <Input\n                  id=\"strongPoints\"\n                  value={formData.strongPoints}\n                  onChange={(e) => handleInputChange('strongPoints', e.target.value)}\n                  placeholder=\"Localização privilegiada, Vista para o mar, Piscina, Academia (separados por vírgula)\"\n                  data-testid=\"input-strong-points\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"mapEmbedUrl\">Link do Mapa Incorporado</Label>\n                <Input\n                  id=\"mapEmbedUrl\"\n                  value={formData.mapEmbedUrl}\n                  onChange={(e) => handleInputChange('mapEmbedUrl', e.target.value)}\n                  placeholder=\"https://www.google.com/maps/embed?pb=...\"\n                  data-testid=\"input-map-embed-url\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"iptu\">IPTU (R$)</Label>\n                <Input\n                  id=\"iptu\"\n                  value={formData.iptu || ''}\n                  onChange={(e) => handleInputChange('iptu', e.target.value)}\n                  placeholder=\"R$ 1.500,00\"\n                  data-testid=\"input-iptu\"\n                />\n              </div>\n\n              <ImageUploadComponent testIdPrefix=\"add\" />\n\n              <div className=\"flex justify-end gap-3 pt-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setIsAddDialogOpen(false)}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  onClick={handleAddProperty}\n                  disabled={!formData.title || !formData.price || !formData.city || !formData.state || createMutation.isPending || isUploading}\n                  data-testid=\"button-save-property\"\n                >\n                  {(createMutation.isPending || isUploading) ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      {isUploading ? \"Uploading...\" : \"Adding...\"}\n                    </>\n                  ) : (\n                    \"Adicionar imóvel\"\n                  )}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Property Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Editar o imóvel</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-title\">Título do Imóvel</Label>\n                  <Input\n                    id=\"edit-title\"\n                    value={formData.title}\n                    onChange={(e) => handleInputChange('title', e.target.value)}\n                    placeholder=\"Modern Luxury Villa\"\n                    data-testid=\"input-edit-title\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-price\">Preço</Label>\n                  <Input\n                    id=\"edit-price\"\n                    value={formData.price}\n                    onChange={(e) => handleInputChange('price', e.target.value)}\n                    placeholder=\"R$ 1.250,00\"\n                    data-testid=\"input-edit-price\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-city\">Cidade</Label>\n                  <Input\n                    id=\"edit-city\"\n                    value={formData.city}\n                    onChange={(e) => handleInputChange('city', e.target.value)}\n                    placeholder=\"Rio de Janeiro\"\n                    data-testid=\"input-edit-city\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-state\">Endereço</Label>\n                  <Input\n                    id=\"edit-state\"\n                    value={formData.state}\n                    onChange={(e) => handleInputChange('state', e.target.value)}\n                    placeholder=\"Avenida das Américas, 3500\"\n                    data-testid=\"input-edit-state\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Tipo de propriedade</Label>\n                  <Select \n                    value={formData.propertyType}\n                    onValueChange={(value) => handleInputChange('propertyType', value)}\n                  >\n                    <SelectTrigger data-testid=\"select-edit-property-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"house\">Casa</SelectItem>\n                      <SelectItem value=\"apartment\">Apartamento</SelectItem>\n                      <SelectItem value=\"condo\">Loja Comercial</SelectItem>\n                      <SelectItem value=\"townhouse\">Condomínio</SelectItem>\n                      <SelectItem value=\"villa\">Casa em Vila</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Tipo</Label>\n                  <Select \n                    value={formData.listingType}\n                    onValueChange={(value) => handleInputChange('listingType', value)}\n                  >\n                    <SelectTrigger data-testid=\"select-edit-listing-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"sale\">Venda</SelectItem>\n                      <SelectItem value=\"rent\">Aluguel</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-sqft\">Metros Quadrados</Label>\n                  <Input\n                    id=\"edit-sqft\"\n                    value={formData.sqft}\n                    onChange={(e) => handleInputChange('sqft', e.target.value)}\n                    placeholder=\"120\"\n                    type=\"number\"\n                    data-testid=\"input-edit-sqft\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Quartos</Label>\n                  <Select \n                    value={formData.bedrooms}\n                    onValueChange={(value) => handleInputChange('bedrooms', value)}\n                  >\n                    <SelectTrigger data-testid=\"select-edit-beds\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 Quarto</SelectItem>\n                      <SelectItem value=\"2\">2 Quartos</SelectItem>\n                      <SelectItem value=\"3\">3 Quartos</SelectItem>\n                      <SelectItem value=\"4\">4 Quartos</SelectItem>\n                      <SelectItem value=\"5\">5+ Quartos</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Banheiros</Label>\n                  <Select \n                    value={formData.bathrooms}\n                    onValueChange={(value) => handleInputChange('bathrooms', value)}\n                  >\n                    <SelectTrigger data-testid=\"select-edit-baths\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 Banheiro</SelectItem>\n                      <SelectItem value=\"2\">2 Banheiros</SelectItem>\n                      <SelectItem value=\"3\">3 Banheiros</SelectItem>\n                      <SelectItem value=\"4\">4+ Banheiros</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-description\">Descrição</Label>\n                <Textarea\n                  id=\"edit-description\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange('description', e.target.value)}\n                  placeholder=\"Descreva sua propriedade colocando os pontos fortes.\"\n                  rows={3}\n                  data-testid=\"textarea-edit-description\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Vagas de Carro</Label>\n                <Select \n                  value={formData.carSpaces}\n                  onValueChange={(value) => handleInputChange('carSpaces', value)}\n                >\n                  <SelectTrigger data-testid=\"select-edit-car-spaces\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1\">1 Vaga</SelectItem>\n                    <SelectItem value=\"2\">2 Vagas</SelectItem>\n                    <SelectItem value=\"3\">3 Vagas</SelectItem>\n                    <SelectItem value=\"4\">4 Vagas</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-strongPoints\">Pontos Fortes</Label>\n                <Input\n                  id=\"edit-strongPoints\"\n                  value={formData.strongPoints}\n                  onChange={(e) => handleInputChange('strongPoints', e.target.value)}\n                  placeholder=\"Localização privilegiada, Vista para o mar, Piscina, Academia (separados por vírgula)\"\n                  data-testid=\"input-edit-strong-points\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-mapEmbedUrl\">Link do Mapa Incorporado</Label>\n                <Input\n                  id=\"edit-mapEmbedUrl\"\n                  value={formData.mapEmbedUrl}\n                  onChange={(e) => handleInputChange('mapEmbedUrl', e.target.value)}\n                  placeholder=\"https://www.google.com/maps/embed?pb=...\"\n                  data-testid=\"input-edit-map-embed-url\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-iptu\">IPTU (R$)</Label>\n                <Input\n                  id=\"edit-iptu\"\n                  value={formData.iptu || ''}\n                  onChange={(e) => handleInputChange('iptu', e.target.value)}\n                  placeholder=\"R$ 1.500,00\"\n                  data-testid=\"input-edit-iptu\"\n                />\n              </div>\n\n              <ImageUploadComponent testIdPrefix=\"edit\" />\n\n              <div className=\"flex justify-end gap-3 pt-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsEditDialogOpen(false);\n                    setEditingProperty(null);\n                    resetForm();\n                  }}\n                  data-testid=\"button-edit-cancel\"\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  onClick={handleUpdateProperty}\n                  disabled={!formData.title || !formData.price || !formData.city || !formData.state || updateMutation.isPending || isUploading}\n                  data-testid=\"button-update-property\"\n                >\n                  {(updateMutation.isPending || isUploading) ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      {isUploading ? \"Uploading...\" : \"Updating...\"}\n                    </>\n                  ) : (\n                    \"Atualizar Imóvel\"\n                  )}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {stats.map((stat, index) => (\n          <Card key={index}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">\n                    {stat.label}\n                  </p>\n                  <p className=\"text-2xl font-bold\" data-testid={`stat-${index}`}>\n                    {stat.value}\n                  </p>\n                </div>\n                <stat.icon className={`h-8 w-8 ${stat.color}`} />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Properties Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Imóveis</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {properties.map((property: Property) => (\n              <div \n                key={property.id} \n                className=\"flex items-center justify-between p-4 border rounded-lg hover-elevate\"\n                data-testid={`property-row-${property.id}`}\n              >\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold\">{property.title}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{property.location}</p>\n                  <div className=\"flex items-center gap-4 mt-2 text-sm\">\n                    <span className=\"font-medium text-primary\">\n                      R$ {Number(property.price).toLocaleString()}{property.listingType === 'rent' ? '/mês' : ''}\n                    </span>\n                    <span>{property.bedrooms} camas • {property.bathrooms} banheiros</span>\n                    <span>{property.sqft.toLocaleString()} m²</span>\n                    <span>{translatePropertyType(property.propertyType)}</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <Badge \n                    variant={getStatusColor(property.status) as any}\n                  >\n                    {translateStatus(property.status)}\n                  </Badge>\n                  <Badge variant=\"outline\">\n                    {translateListingType(property.listingType)}\n                  </Badge>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\"\n                    onClick={() => handleEditProperty(property)}\n                    data-testid={`button-edit-${property.id}`}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\"\n                    onClick={() => handleDeleteProperty(property.id)}\n                    data-testid={`button-delete-${property.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":38599},"client/src/components/FilterPanel.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue \n} from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, Filter, MapPin } from \"lucide-react\";\n\ninterface FilterState {\n  priceRange: [number, number];\n  location: string;\n  propertyType: string;\n  beds: string;\n  baths: string;\n  amenities: string[];\n}\n\ninterface FilterPanelProps {\n  onFiltersChange?: (filters: FilterState) => void;\n  onReset?: () => void;\n}\n\nexport default function FilterPanel({ onFiltersChange, onReset }: FilterPanelProps) {\n  const [filters, setFilters] = useState<FilterState>({\n    priceRange: [0, 2000000],\n    location: \"\",\n    propertyType: \"\",\n    beds: \"\",\n    baths: \"\",\n    amenities: []\n  });\n\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const amenitiesList = [\n    \"Swimming Pool\", \"Gym\", \"Parking\", \"Garden\", \"Balcony\", \n    \"Air Conditioning\", \"Fireplace\", \"Walk-in Closet\"\n  ];\n\n  const handleFilterChange = (key: keyof FilterState, value: any) => {\n    const newFilters = { ...filters, [key]: value };\n    setFilters(newFilters);\n    onFiltersChange?.(newFilters);\n    console.log('Filters changed:', key, value);\n  };\n\n  const handleAmenityToggle = (amenity: string) => {\n    const newAmenities = filters.amenities.includes(amenity)\n      ? filters.amenities.filter(a => a !== amenity)\n      : [...filters.amenities, amenity];\n    handleFilterChange('amenities', newAmenities);\n  };\n\n  const handleReset = () => {\n    const defaultFilters: FilterState = {\n      priceRange: [0, 2000000],\n      location: \"\",\n      propertyType: \"\",\n      beds: \"\",\n      baths: \"\",\n      amenities: []\n    };\n    setFilters(defaultFilters);\n    onFiltersChange?.(defaultFilters);\n    onReset?.();\n    console.log('Filters reset');\n  };\n\n  const activeFiltersCount = Object.entries(filters).reduce((count, [key, value]) => {\n    if (key === 'priceRange') return count + (value[0] !== 0 || value[1] !== 2000000 ? 1 : 0);\n    if (key === 'amenities') return count + (value as string[]).length;\n    return count + (value ? 1 : 0);\n  }, 0);\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filtros\n            {activeFiltersCount > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-2\">\n                {activeFiltersCount}\n              </Badge>\n            )}\n          </CardTitle>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsExpanded(!isExpanded)}\n              data-testid=\"button-toggle-filters\"\n            >\n              {isExpanded ? 'Menos' : 'Mais'}\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleReset}\n              data-testid=\"button-reset-filters\"\n            >\n              Limpar\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Location */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"location\">Localização</Label>\n          <div className=\"relative\">\n            <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              id=\"location\"\n              placeholder=\"Pesquise pela cidade, endereço, bairro...\"\n              value={filters.location}\n              onChange={(e) => handleFilterChange('location', e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-location\"\n            />\n          </div>\n        </div>\n\n        {/* Price Range */}\n        <div className=\"space-y-3\">\n          <Label>Faixa de preço</Label>\n          \n          {/* Price Input Fields */}\n          <div className=\"grid grid-cols-2 gap-2\">\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"min-price\" className=\"text-xs text-muted-foreground\">Mínimo</Label>\n              <Input\n                id=\"min-price\"\n                type=\"number\"\n                placeholder=\"0\"\n                value={filters.priceRange[0] || ''}\n                onChange={(e) => {\n                  const value = Math.max(0, Math.min(Number(e.target.value) || 0, filters.priceRange[1]));\n                  handleFilterChange('priceRange', [value, filters.priceRange[1]]);\n                }}\n                className=\"text-sm\"\n                data-testid=\"input-min-price\"\n              />\n            </div>\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"max-price\" className=\"text-xs text-muted-foreground\">Máximo</Label>\n              <Input\n                id=\"max-price\"\n                type=\"number\"\n                placeholder=\"2000000\"\n                value={filters.priceRange[1] || ''}\n                onChange={(e) => {\n                  const value = Math.max(filters.priceRange[0], Math.min(Number(e.target.value) || 2000000, 2000000));\n                  handleFilterChange('priceRange', [filters.priceRange[0], value]);\n                }}\n                className=\"text-sm\"\n                data-testid=\"input-max-price\"\n              />\n            </div>\n          </div>\n\n          {/* Price Slider */}\n          <div className=\"px-2\">\n            <Slider\n              value={filters.priceRange}\n              onValueChange={(value) => handleFilterChange('priceRange', value)}\n              max={2000000}\n              min={0}\n              step={25000}\n              className=\"w-full\"\n              data-testid=\"slider-price-range\"\n            />\n          </div>\n          <div className=\"flex justify-between text-sm text-muted-foreground\">\n            <span>R${filters.priceRange[0].toLocaleString()}</span>\n            <span>R${filters.priceRange[1].toLocaleString()}</span>\n          </div>\n        </div>\n\n        {/* Property Type */}\n        <div className=\"space-y-2\">\n          <Label>Tipo de propriedade</Label>\n          <Select \n            value={filters.propertyType}\n            onValueChange={(value) => handleFilterChange('propertyType', value)}\n          >\n            <SelectTrigger data-testid=\"select-property-type\">\n              <SelectValue placeholder=\"Selecione o tipo de propriedade\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"house\">Casa</SelectItem>\n              <SelectItem value=\"apartment\">Apartamento</SelectItem>\n              <SelectItem value=\"condo\">Loja Comercial</SelectItem>\n              <SelectItem value=\"townhouse\">Condomínio</SelectItem>\n              <SelectItem value=\"villa\">Casa em vila</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Beds & Baths */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label>Quartos</Label>\n            <Select \n              value={filters.beds}\n              onValueChange={(value) => handleFilterChange('beds', value)}\n            >\n              <SelectTrigger data-testid=\"select-beds\">\n                <SelectValue placeholder=\"Qualquer\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"1\">1+</SelectItem>\n                <SelectItem value=\"2\">2+</SelectItem>\n                <SelectItem value=\"3\">3+</SelectItem>\n                <SelectItem value=\"4\">4+</SelectItem>\n                <SelectItem value=\"5\">5+</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Banheiros</Label>\n            <Select \n              value={filters.baths}\n              onValueChange={(value) => handleFilterChange('baths', value)}\n            >\n              <SelectTrigger data-testid=\"select-baths\">\n                <SelectValue placeholder=\"Qualquer\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"1\">1+</SelectItem>\n                <SelectItem value=\"2\">2+</SelectItem>\n                <SelectItem value=\"3\">3+</SelectItem>\n                <SelectItem value=\"4\">4+</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Amenities - Expanded */}\n        {isExpanded && (\n          <div className=\"space-y-3\">\n            <Label>Amenities</Label>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {amenitiesList.map((amenity) => (\n                <div key={amenity} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={amenity}\n                    checked={filters.amenities.includes(amenity)}\n                    onCheckedChange={() => handleAmenityToggle(amenity)}\n                    data-testid={`checkbox-${amenity.toLowerCase().replace(/\\s+/g, '-')}`}\n                  />\n                  <Label \n                    htmlFor={amenity} \n                    className=\"text-sm font-normal cursor-pointer\"\n                  >\n                    {amenity}\n                  </Label>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Selected Amenities */}\n        {filters.amenities.length > 0 && (\n          <div className=\"space-y-2\">\n            <Label>Selected Amenities</Label>\n            <div className=\"flex flex-wrap gap-1\">\n              {filters.amenities.map((amenity) => (\n                <Badge \n                  key={amenity} \n                  variant=\"secondary\" \n                  className=\"text-xs\"\n                  data-testid={`badge-amenity-${amenity.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  {amenity}\n                  <X \n                    className=\"h-3 w-3 ml-1 cursor-pointer\" \n                    onClick={() => handleAmenityToggle(amenity)}\n                  />\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10494},"client/src/components/Header.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Search, \n  Home, \n  Building, \n  MapPin, \n  User, \n  Settings,\n  Moon,\n  Sun \n} from \"lucide-react\";\n\ninterface HeaderProps {\n  onSearch?: (query: string) => void;\n  activeTab?: 'buy' | 'rent';\n  onTabChange?: (tab: 'buy' | 'rent') => void;\n}\n\nexport default function Header({ onSearch, activeTab = 'buy', onTabChange }: HeaderProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDark, setIsDark] = useState(false);\n  const [, setLocation] = useLocation();\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch?.(searchQuery);\n    console.log('Search triggered:', searchQuery);\n  };\n\n  const toggleTheme = () => {\n    setIsDark(!isDark);\n    document.documentElement.classList.toggle('dark');\n    console.log('Theme toggled:', !isDark ? 'dark' : 'light');\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex h-16 items-center justify-between\">\n          {/* Logo */}\n          <div className=\"flex items-center gap-2\">\n            <Home className=\"h-8 w-8 text-primary\" />\n            <span className=\"text-xl font-bold\">Regal Imobiliária</span>\n          </div>\n\n          {/* Navigation Tabs */}\n          <div className=\"hidden md:flex items-center gap-1 bg-muted rounded-lg p-1\">\n            <Button\n              variant={activeTab === 'buy' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => onTabChange?.('buy')}\n              data-testid=\"button-buy-tab\"\n              className=\"h-8\"\n            >\n              <Building className=\"h-4 w-4 mr-1\" />\n              Comprar\n            </Button>\n            <Button\n              variant={activeTab === 'rent' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => onTabChange?.('rent')}\n              data-testid=\"button-rent-tab\"\n              className=\"h-8\"\n            >\n              <MapPin className=\"h-4 w-4 mr-1\" />\n              Alugar\n            </Button>\n          </div>\n\n          {/* Search Bar */}\n          <form onSubmit={handleSearch} className=\"hidden lg:flex items-center gap-2 flex-1 max-w-md mx-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                type=\"search\"\n                placeholder=\"Pesquise pelo endereço, tipo de propriedade...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Button type=\"submit\" data-testid=\"button-search\">\n              Pesquisar\n            </Button>\n          </form>\n\n          {/* User Actions */}\n          <div className=\"flex items-center gap-2\">\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              data-testid=\"button-theme-toggle\"\n            >\n              {isDark ? <Sun className=\"h-4 w-4\" /> : <Moon className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Search */}\n        <div className=\"lg:hidden pb-4\">\n          <form onSubmit={handleSearch} className=\"flex items-center gap-2\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                type=\"search\"\n                placeholder=\"Search properties...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-mobile-search\"\n              />\n            </div>\n            <Button type=\"submit\" data-testid=\"button-mobile-search\">\n              Search\n            </Button>\n          </form>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":4342},"client/src/components/HeroSection.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, MapPin, TrendingUp, Users, Award } from \"lucide-react\";\nimport heroImage from '@assets/generated_images/Luxury_house_hero_image_f495f766.png';\n\ninterface HeroSectionProps {\n  onSearch?: (query: string) => void;\n}\n\nexport default function HeroSection({ onSearch }: HeroSectionProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch?.(searchQuery);\n    console.log('Hero search triggered:', searchQuery);\n  };\n\n  const stats = [\n    { icon: TrendingUp, label: \"Propriedades vendidas\", value: \"200+\" },\n    { icon: Users, label: \"Clientes satisfeitos\", value: \"1000+\" },\n    { icon: Award, label: \"Anos de experiência\", value: \"25+\" }\n  ];\n\n  return (\n    <section className=\"relative min-h-[600px] flex items-center\">\n      {/* Background Image with Overlay */}\n      <div className=\"absolute inset-0\">\n        <img\n          src={heroImage}\n          alt=\"Luxury real estate\"\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-r from-black/70 via-black/50 to-black/30\"></div>\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 container mx-auto px-4\">\n        <div className=\"max-w-2xl\">\n          {/* Badge */}\n          <Badge variant=\"secondary\" className=\"mb-4 bg-background/20 text-white border-white/20\">\n            <Award className=\"h-3 w-3 mr-1\" />\n            #1 Imobiliária do Rio de Janeiro\n          </Badge>\n\n          {/* Heading */}\n          <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n            Encontre a sua\n            <span className=\"block text-chart-3\">Casa dos sonhos</span>\n          </h1>\n\n          {/* Subheading */}\n          <p className=\"text-xl text-white/90 mb-8 leading-relaxed\">\n            Descubra aqui propriedades perfeitas e adequeadas para o seu estilo de visa.\n            Pesquisa dentre várias opções disponíveis.\n          </p>\n\n          {/* Search Form */}\n          <form onSubmit={handleSearch} className=\"mb-8\">\n            <div className=\"flex flex-col sm:flex-row gap-3 p-2 bg-background/95 backdrop-blur rounded-lg\">\n              <div className=\"relative flex-1\">\n                <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  type=\"search\"\n                  placeholder=\"Pesquisa pelo endereço, bairro, ou tipo de propriedade...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 border-0 bg-transparent focus:ring-0\"\n                  data-testid=\"input-hero-search\"\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                size=\"lg\"\n                className=\"whitespace-nowrap\"\n                data-testid=\"button-hero-search\"\n              >\n                <Search className=\"h-4 w-4 mr-2\" />\n                Pesquise propriedades\n              </Button>\n            </div>\n          </form>\n\n          {/* Quick Actions */}\n          <div className=\"flex flex-wrap gap-3 mb-8\">\n            <Button \n              variant=\"outline\" \n              className=\"bg-background/20 border-white/20 text-white hover:bg-background/30\"\n              data-testid=\"button-quick-luxury\"\n            >\n              Propriedades de luxo\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"bg-background/20 border-white/20 text-white hover:bg-background/30\"\n              data-testid=\"button-quick-condos\"\n            >\n              Apartamentos\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"bg-background/20 border-white/20 text-white hover:bg-background/30\"\n              data-testid=\"button-quick-rentals\"\n            >\n              Lojas comerciais\n            </Button>\n          </div>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6\">\n            {stats.map((stat, index) => (\n              <div \n                key={index} \n                className=\"flex items-center gap-3 text-white\"\n                data-testid={`stat-${index}`}\n              >\n                <div className=\"p-2 bg-white/10 rounded-lg\">\n                  <stat.icon className=\"h-5 w-5\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold\">{stat.value}</div>\n                  <div className=\"text-sm text-white/80\">{stat.label}</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4941},"client/src/components/PropertyCard.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Heart, \n  MapPin, \n  Bed, \n  Bath, \n  Square, \n  Car,\n  Eye \n} from \"lucide-react\";\n\ninterface PropertyCardProps {\n  id: string;\n  title: string;\n  price: string;\n  location: string;\n  image: string;\n  beds: number;\n  baths: number;\n  sqft: number;\n  parking?: number;\n  type: 'sale' | 'rent';\n  featured?: boolean;\n  onFavorite?: (id: string) => void;\n}\n\nexport default function PropertyCard({\n  id,\n  title,\n  price,\n  location,\n  image,\n  beds,\n  baths,\n  sqft,\n  parking,\n  type,\n  featured = false,\n  onFavorite\n}: PropertyCardProps) {\n  const [isFavorited, setIsFavorited] = useState(false);\n  const [, setLocation] = useLocation();\n\n  const handleFavorite = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsFavorited(!isFavorited);\n    onFavorite?.(id);\n    console.log('Property favorited:', id, !isFavorited);\n  };\n\n  const handleView = () => {\n    setLocation(`/property/${id}`);\n    console.log('Navigate to property:', id);\n  };\n\n  return (\n    <Card className=\"group hover-elevate cursor-pointer transition-all duration-200\" onClick={handleView}>\n      <div className=\"relative\">\n        <img\n          src={image}\n          alt={title}\n          className=\"w-full h-48 object-cover rounded-t-lg\"\n          data-testid={`img-property-${id}`}\n        />\n        <div className=\"absolute top-2 left-2 flex gap-2\">\n          {featured && (\n            <Badge variant=\"destructive\" className=\"text-xs\">\n              Featured\n            </Badge>\n          )}\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            {type === 'sale' ? 'Venda' : 'Aluguel'}\n          </Badge>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute top-2 right-2 bg-background/80 hover:bg-background\"\n          onClick={handleFavorite}\n          data-testid={`button-favorite-${id}`}\n        >\n          <Heart \n            className={`h-4 w-4 ${isFavorited ? 'fill-red-500 text-red-500' : 'text-foreground'}`} \n          />\n        </Button>\n      </div>\n      \n      <CardContent className=\"p-4\">\n        <div className=\"space-y-3\">\n          <div>\n            <h3 className=\"font-semibold text-lg leading-tight\" data-testid={`text-title-${id}`}>\n              {title}\n            </h3>\n            <div className=\"flex items-center gap-1 text-muted-foreground mt-1\">\n              <MapPin className=\"h-3 w-3\" />\n              <span className=\"text-sm\" data-testid={`text-location-${id}`}>{location}</span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-2xl font-bold text-primary\" data-testid={`text-price-${id}`}>\n              {price}\n            </span>\n            {type === 'rent' && (\n              <span className=\"text-sm text-muted-foreground\"></span>\n            )}\n          </div>\n\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <Bed className=\"h-4 w-4\" />\n              <span data-testid={`text-beds-${id}`}>{beds}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Bath className=\"h-4 w-4\" />\n              <span data-testid={`text-baths-${id}`}>{baths}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Square className=\"h-4 w-4\" />\n              <span data-testid={`text-sqft-${id}`}>{sqft.toLocaleString()} m²</span>\n            </div>\n            {parking && (\n              <div className=\"flex items-center gap-1\">\n                <Car className=\"h-4 w-4\" />\n                <span data-testid={`text-parking-${id}`}>{parking}</span>\n              </div>\n            )}\n          </div>\n\n          <Button \n            className=\"w-full mt-3\" \n            variant=\"outline\"\n            onClick={(e) => {\n              e.stopPropagation();\n              handleView();\n            }}\n            data-testid={`button-view-details-${id}`}\n          >\n            <Eye className=\"h-4 w-4 mr-2\" />\n            Veja Mais\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4398},"client/src/components/PropertyGrid.tsx":{"content":"import { useState } from \"react\";\nimport PropertyCard from \"./PropertyCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue \n} from \"@/components/ui/select\";\nimport { Grid, List, ArrowUpDown, Loader2 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Property } from \"@shared/schema\";\n\n// Fallback images for properties without images\nimport heroImage from '@assets/generated_images/Luxury_house_hero_image_f495f766.png';\nimport apartmentImage from '@assets/generated_images/Modern_apartment_building_35d6793e.png';\nimport interiorImage from '@assets/generated_images/Modern_living_room_interior_f45c2a76.png';\n\n// Helper function to get fallback image for properties\nconst getFallbackImage = (index: number) => {\n  const images = [heroImage, apartmentImage, interiorImage];\n  return images[index % images.length];\n};\n\ninterface FilterState {\n  priceRange: [number, number];\n  location: string;\n  propertyType: string;\n  beds: string;\n  baths: string;\n  amenities: string[];\n}\n\ninterface PropertyGridProps {\n  searchQuery?: string;\n  activeTab?: 'buy' | 'rent';\n  filters?: FilterState;\n}\n\nexport default function PropertyGrid({ \n  searchQuery = \"\", \n  activeTab = 'buy',\n  filters\n}: PropertyGridProps) {\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [sortBy, setSortBy] = useState(\"price-low\");\n\n  // Build query parameters\n  const queryParams = new URLSearchParams();\n  queryParams.set('listingType', activeTab === 'buy' ? 'sale' : 'rent');\n  queryParams.set('limit', '50');\n  \n  if (sortBy === 'price-low') queryParams.set('sortBy', 'price_asc');\n  if (sortBy === 'price-high') queryParams.set('sortBy', 'price_desc');\n  if (sortBy === 'newest') queryParams.set('sortBy', 'newest');\n  \n  // Add filter parameters\n  if (filters) {\n    if (filters.priceRange[0] !== 0) queryParams.set('minPrice', filters.priceRange[0].toString());\n    if (filters.priceRange[1] !== 2000000) queryParams.set('maxPrice', filters.priceRange[1].toString());\n    if (filters.location) {\n      // Try to parse location as \"City, State\" or send as both city and state search\n      const locationParts = filters.location.split(',').map(part => part.trim());\n      if (locationParts.length >= 2) {\n        queryParams.set('city', locationParts[0]);\n        queryParams.set('state', locationParts[1]);\n      } else {\n        // Single location term - search in city\n        queryParams.set('city', filters.location);\n      }\n    }\n    if (filters.propertyType) queryParams.set('propertyType', filters.propertyType);\n    if (filters.beds) queryParams.set('minBeds', filters.beds);\n    if (filters.baths) queryParams.set('minBaths', filters.baths);\n    // Note: Amenities filtering not yet supported by backend\n    // if (filters.amenities && filters.amenities.length > 0) {\n    //   queryParams.set('amenities', filters.amenities.join(','));\n    // }\n  }\n\n  // Fetch properties from API\n  const apiUrl = searchQuery \n    ? `/api/properties/search?q=${encodeURIComponent(searchQuery)}&${queryParams.toString()}`\n    : `/api/properties?${queryParams.toString()}`;\n    \n  const { data: apiResponse, isLoading, error } = useQuery({\n    queryKey: [apiUrl]\n  });\n\n  // Process properties from API response\n  const properties = ((apiResponse as any)?.data || []).map((property: Property, index: number) => ({\n    ...property,\n    // Format price based on listing type\n    price: property.listingType === 'sale' \n      ? `R$ ${Number(property.price).toLocaleString()}`\n      : `R$ ${Number(property.price).toLocaleString()}/mês`,\n    // Use fallback image if no images\n    image: property.images && property.images.length > 0 \n      ? property.images[0] \n      : getFallbackImage(index),\n    // Map database fields to component props\n    type: property.listingType,\n    location: `${property.city}, ${property.state}`,\n    beds: property.bedrooms,\n    baths: property.bathrooms,\n    sqft: property.sqft,\n    parking: property.carSpaces || 0\n  }));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with controls */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div className=\"flex items-center gap-4\">\n          <h2 className=\"text-2xl font-bold\">\n            Propriedas para {activeTab === 'buy' ? 'Venda' : 'Aluguel'}\n          </h2>\n          <Badge variant=\"secondary\" data-testid=\"text-results-count\">\n            {isLoading ? \"Carregando...\" : `${properties.length} resultados`}\n          </Badge>\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          {/* Sort */}\n          <div className=\"flex items-center gap-2\">\n            <ArrowUpDown className=\"h-4 w-4 text-muted-foreground\" />\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-[140px]\" data-testid=\"select-sort\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"price-low\">Menor preço primeiro</SelectItem>\n                <SelectItem value=\"price-high\">Maior preço primeiro</SelectItem>\n                <SelectItem value=\"newest\">Mais recente</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* View Mode */}\n          <div className=\"flex items-center bg-muted rounded-lg p-1\">\n            <Button\n              variant={viewMode === 'grid' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('grid')}\n              data-testid=\"button-grid-view\"\n              className=\"h-8 w-8 p-0\"\n            >\n              <Grid className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant={viewMode === 'list' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('list')}\n              data-testid=\"button-list-view\"\n              className=\"h-8 w-8 p-0\"\n            >\n              <List className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Search Results Info */}\n      {searchQuery && (\n        <div className=\"bg-muted/50 rounded-lg p-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            Mostrando resultados para \"<span className=\"font-medium\">{searchQuery}</span>\"\n          </p>\n        </div>\n      )}\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"text-center py-12\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-2\" />\n          <p className=\"text-lg text-muted-foreground\">Carregando propriedades...</p>\n        </div>\n      )}\n\n      {/* Error State */}\n      {error && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-lg text-destructive\">Falha ao carregar propriedades</p>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Por favor tente novamente.\n          </p>\n        </div>\n      )}\n\n      {/* Properties Grid/List */}\n      {!isLoading && !error && properties.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-lg text-muted-foreground\">Nenhuma propriedade encontrada</p>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Tente ajustar seus critérios de busca\n          </p>\n        </div>\n      )}\n\n      {!isLoading && !error && properties.length > 0 && (\n        <div className={\n          viewMode === 'grid' \n            ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n            : \"space-y-4\"\n        }>\n          {properties.map((property: any) => (\n            <PropertyCard\n              key={property.id}\n              {...property}\n              onFavorite={(id) => console.log('Favorited:', id)}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Load More Button */}\n      {!isLoading && !error && properties.length > 0 && (\n        <div className=\"text-center pt-8\">\n          <Button \n            variant=\"outline\" \n            size=\"lg\"\n            onClick={() => console.log('Load more properties')}\n            data-testid=\"button-load-more\"\n          >\n            Carregue mais propriedades\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8340},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n\ntype Theme = \"light\" | \"dark\" | \"system\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n    \n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(theme);\n    }\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}","size_bytes":1265},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":256},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Handle FormData differently - don't set Content-Type header or stringify\n  const isFormData = data instanceof FormData;\n  \n  const res = await fetch(url, {\n    method,\n    headers: !isFormData && data ? { \"Content-Type\": \"application/json\" } : {},\n    body: isFormData ? data as FormData : (data ? JSON.stringify(data) : undefined),\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1560},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminPage.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminPanel from \"@/components/AdminPanel\";\nimport { Button } from \"@/components/ui/button\";\nimport { LogOut, User, Loader2 } from \"lucide-react\";\n\nexport default function AdminPage() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"You need to log in to access the admin panel.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 1000);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p className=\"text-lg text-muted-foreground\">Checando autenticação...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Don't render admin content if not authenticated\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-lg text-muted-foreground mb-4\">Redirecionando para a página de login...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleLogout = async () => {\n    try {\n      const response = await fetch(\"/api/auth/logout\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      \n      if (response.ok) {\n        toast({\n          title: \"Logged Out\",\n          description: \"You have been logged out successfully.\",\n        });\n        window.location.href = \"/\";\n      } else {\n        toast({\n          title: \"Logout Failed\",\n          description: \"Failed to logout. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      toast({\n        title: \"Logout Failed\",\n        description: \"An error occurred during logout.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Admin Header with User Info and Logout */}\n      <header className=\"border-b bg-card\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <h1 className=\"text-xl font-semibold\">Admin Panel</h1>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <User className=\"h-4 w-4\" />\n              <span data-testid=\"text-admin-user\">\n                {user?.firstName && user?.lastName \n                  ? `${user.firstName} ${user.lastName}`\n                  : user?.email || 'Admin User'\n                }\n              </span>\n            </div>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Sair\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <AdminPanel />\n    </div>\n  );\n}","size_bytes":3503},"client/src/pages/HomePage.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport HeroSection from \"@/components/HeroSection\";\nimport FilterPanel from \"@/components/FilterPanel\";\nimport PropertyGrid from \"@/components/PropertyGrid\";\nimport { Button } from \"@/components/ui/button\";\nimport { SlidersHorizontal, X } from \"lucide-react\";\n\ninterface FilterState {\n  priceRange: [number, number];\n  location: string;\n  propertyType: string;\n  beds: string;\n  baths: string;\n  amenities: string[];\n}\n\nexport default function HomePage() {\n  const [activeTab, setActiveTab] = useState<'buy' | 'rent'>('buy');\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState<FilterState>({\n    priceRange: [0, 2000000],\n    location: \"\",\n    propertyType: \"\",\n    beds: \"\",\n    baths: \"\",\n    amenities: []\n  });\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n    console.log('Search query updated:', query);\n  };\n\n  const handleTabChange = (tab: 'buy' | 'rent') => {\n    setActiveTab(tab);\n    console.log('Tab changed to:', tab);\n  };\n\n  const handleFiltersChange = (newFilters: FilterState) => {\n    setFilters(newFilters);\n    console.log('Filters applied:', newFilters);\n  };\n\n  const handleFiltersReset = () => {\n    setFilters({\n      priceRange: [0, 2000000],\n      location: \"\",\n      propertyType: \"\",\n      beds: \"\",\n      baths: \"\",\n      amenities: []\n    });\n    console.log('Filters reset');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        onSearch={handleSearch}\n        activeTab={activeTab}\n        onTabChange={handleTabChange}\n      />\n      \n      <HeroSection onSearch={handleSearch} />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          {/* Filters Sidebar */}\n          <div className={`lg:w-80 ${showFilters ? 'block' : 'hidden lg:block'}`}>\n            <div className=\"sticky top-24\">\n              <FilterPanel \n                onFiltersChange={handleFiltersChange}\n                onReset={handleFiltersReset}\n              />\n            </div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"flex-1\">\n            {/* Mobile Filter Toggle */}\n            <div className=\"lg:hidden mb-6\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowFilters(!showFilters)}\n                data-testid=\"button-toggle-mobile-filters\"\n                className=\"w-full\"\n              >\n                {showFilters ? (\n                  <>\n                    <X className=\"h-4 w-4 mr-2\" />\n                    Hide Filters\n                  </>\n                ) : (\n                  <>\n                    <SlidersHorizontal className=\"h-4 w-4 mr-2\" />\n                    Show Filters\n                  </>\n                )}\n              </Button>\n            </div>\n\n            <PropertyGrid\n              searchQuery={searchQuery}\n              activeTab={activeTab}\n              filters={filters}\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":3193},"client/src/pages/LoginPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { loginSchema, type LoginCredentials } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Home, LogIn, User } from \"lucide-react\";\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<LoginCredentials>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginCredentials) => {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      const result = await response.json();\n\n      if (result.success) {\n        toast({\n          title: \"Login Successful\",\n          description: \"Welcome back!\",\n        });\n        setLocation(\"/admin\");\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: result.error || \"Invalid credentials\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      toast({\n        title: \"Login Failed\",\n        description: \"An error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"flex items-center justify-center gap-2 mb-8\">\n          <Home className=\"h-8 w-8 text-primary\" />\n          <span className=\"text-2xl font-bold\">Regal Imobiliária</span>\n        </div>\n\n        {/* Login Form */}\n        <Card>\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"p-3 bg-primary/10 rounded-full\">\n                <User className=\"h-6 w-6 text-primary\" />\n              </div>\n            </div>\n            <CardTitle>Bem vindo</CardTitle>\n            <CardDescription>\n              Acesse o painel de administrador\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Usuário</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Coloque o seu usuário\"\n                          data-testid=\"input-username\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Senha</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Insira sua senha\"\n                          data-testid=\"input-password\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  data-testid=\"button-login\"\n                >\n                  {isLoading ? (\n                    \"Signing in...\"\n                  ) : (\n                    <>\n                      <LogIn className=\"h-4 w-4 mr-2\" />\n                      Entrar\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => setLocation(\"/\")}\n                data-testid=\"button-back-home\"\n                className=\"text-sm\"\n              >\n                ← Voltar\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5004},"client/src/pages/PropertyDetailPage.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  ArrowLeft,\n  MapPin,\n  Home,\n  Bath,\n  Square,\n  Calendar,\n  Share2,\n  Phone,\n  Mail,\n  ChevronLeft,\n  ChevronRight,\n  Car,\n} from \"lucide-react\";\nimport React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useLocation } from \"wouter\";\nimport type { Property } from \"@shared/schema\";\n\nexport default function PropertyDetailPage() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n\n  // Fetch specific property\n  const {\n    data: apiResponse,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [`/api/properties/${id}`],\n  });\n\n  const property = (apiResponse as any)?.data as Property;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-48 mx-auto mb-4\"></div>\n            <div className=\"h-4 bg-muted rounded w-32 mx-auto\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !property) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-2\">Property Not Found</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The property you're looking for doesn't exist.\n          </p>\n          <Button\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back-home\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Properties\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"default\";\n      case \"pending\":\n        return \"secondary\";\n      case \"sold\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const translateStatus = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"Ativo\";\n      case \"pending\":\n        return \"Pendente\";\n      case \"sold\":\n        return \"Vendido\";\n      case \"inactive\":\n        return \"Inativo\";\n      default:\n        return status;\n    }\n  };\n\n  const translateListingType = (listingType: string) => {\n    switch (listingType) {\n      case \"sale\":\n        return \"Venda\";\n      case \"rent\":\n        return \"Aluguel\";\n      default:\n        return listingType;\n    }\n  };\n\n  const translatePropertyType = (propertyType: string) => {\n    switch (propertyType) {\n      case \"house\":\n        return \"Casa\";\n      case \"apartment\":\n        return \"Apartamento\";\n      case \"condo\":\n        return \"Condomínio\";\n      case \"townhouse\":\n        return \"Sobrado\";\n      case \"villa\":\n        return \"Vila\";\n      default:\n        return propertyType;\n    }\n  };\n\n  // Property Image Gallery Component\n  const PropertyImageGallery = ({\n    images,\n    title,\n  }: {\n    images: string[];\n    title: string;\n  }) => {\n    const [currentImageIndex, setCurrentImageIndex] = useState(0);\n    const [brokenImages, setBrokenImages] = useState(new Set<number>());\n\n    // If no images, show placeholder\n    if (!images || images.length === 0) {\n      return (\n        <div className=\"aspect-[16/10] bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900 rounded-lg flex items-center justify-center\">\n          <div className=\"text-center text-muted-foreground\">\n            <Home className=\"h-16 w-16 mx-auto mb-4 opacity-40\" />\n            <p className=\"text-lg font-medium\">Fotos do imóvel</p>\n            <p className=\"text-sm\">Sem fotos disponíveis</p>\n          </div>\n        </div>\n      );\n    }\n\n    const nextImage = () => {\n      setCurrentImageIndex((prev) => (prev + 1) % images.length);\n    };\n\n    const prevImage = () => {\n      setCurrentImageIndex(\n        (prev) => (prev - 1 + images.length) % images.length,\n      );\n    };\n\n    const handleImageError = (index: number) => {\n      setBrokenImages((prev) => new Set(prev).add(index));\n    };\n\n    return (\n      <div className=\"relative\">\n        {/* Main Image */}\n        <div className=\"aspect-[16/10] relative overflow-hidden rounded-lg\">\n          {brokenImages.has(currentImageIndex) ? (\n            <div className=\"w-full h-full bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900 flex items-center justify-center\">\n              <div className=\"text-center text-muted-foreground\">\n                <Home className=\"h-16 w-16 mx-auto mb-4 opacity-40\" />\n                <p className=\"text-lg font-medium\">Imagem Indisponível</p>\n                <p className=\"text-sm\">Falha ao carregar imagem</p>\n              </div>\n            </div>\n          ) : (\n            <img\n              src={images[currentImageIndex]}\n              alt={`${title} - Image ${currentImageIndex + 1}`}\n              className=\"w-full h-full object-cover\"\n              onError={() => handleImageError(currentImageIndex)}\n            />\n          )}\n\n          {/* Navigation Arrows - only show if more than 1 image */}\n          {images.length > 1 && (\n            <>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"absolute left-2 top-1/2 transform -translate-y-1/2 bg-black/20 hover:bg-black/40 text-white rounded-full\"\n                onClick={prevImage}\n                data-testid=\"button-prev-image\"\n              >\n                <ChevronLeft className=\"h-6 w-6\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-black/20 hover:bg-black/40 text-white rounded-full\"\n                onClick={nextImage}\n                data-testid=\"button-next-image\"\n              >\n                <ChevronRight className=\"h-6 w-6\" />\n              </Button>\n            </>\n          )}\n\n          {/* Image Counter */}\n          {images.length > 1 && (\n            <div className=\"absolute bottom-4 right-4 bg-black/60 text-white px-3 py-1 rounded-full text-sm\">\n              {currentImageIndex + 1} / {images.length}\n            </div>\n          )}\n        </div>\n\n        {/* Thumbnail Strip - only show if more than 1 image */}\n        {images.length > 1 && (\n          <div className=\"flex gap-2 mt-4 p-4 overflow-x-auto\">\n            {images.map((image, index) => (\n              <button\n                key={index}\n                onClick={() => setCurrentImageIndex(index)}\n                className={`flex-shrink-0 w-20 h-16 rounded border-2 overflow-hidden transition-all ${\n                  index === currentImageIndex\n                    ? \"border-primary ring-2 ring-primary/20\"\n                    : \"border-muted hover:border-primary/50\"\n                }`}\n                data-testid={`thumbnail-${index}`}\n              >\n                {brokenImages.has(index) ? (\n                  <div className=\"w-full h-full bg-muted flex items-center justify-center\">\n                    <span className=\"text-xs text-muted-foreground\">?</span>\n                  </div>\n                ) : (\n                  <img\n                    src={image}\n                    alt={`${title} thumbnail ${index + 1}`}\n                    className=\"w-full h-full object-cover\"\n                    onError={() => handleImageError(index)}\n                  />\n                )}\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b bg-card\">\n        <div className=\"container mx-auto px-4 py-4 grid grid-cols-3 items-center\">\n          <div className=\"flex justify-start\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Voltar\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center justify-center gap-2\">\n            <Home className=\"h-5 w-5 text-primary\" />\n            <span className=\"text-lg font-semibold\">Regal Imobiliária</span>\n          </div>\n          \n          <div className=\"flex items-center justify-end gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              data-testid=\"button-share\"\n              onClick={() =>\n                window.open(\n                  \"https://www.google.com\",\n                  \"_blank\",\n                  \"noopener,noreferrer\",\n                )\n              }\n            >\n              <Share2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Property Images */}\n            <Card>\n              <CardContent className=\"p-0\">\n                <PropertyImageGallery\n                  images={property.images || []}\n                  title={property.title}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Property Details */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div>\n                    <h1\n                      className=\"text-3xl font-bold mb-2\"\n                      data-testid=\"text-property-title\"\n                    >\n                      {property.title}\n                    </h1>\n                    <div className=\"flex items-center text-muted-foreground mb-2\">\n                      <MapPin className=\"h-4 w-4 mr-1\" />\n                      <span data-testid=\"text-property-location\">\n                        {property.location}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge\n                        variant={getStatusColor(property.status) as any}\n                        className=\"capitalize\"\n                        data-testid=\"badge-property-status\"\n                      >\n                        {translateStatus(property.status)}\n                      </Badge>\n                      <Badge variant=\"outline\">\n                        {translateListingType(property.listingType)}\n                      </Badge>\n                      <Badge variant=\"outline\">\n                        {translatePropertyType(property.propertyType)}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div\n                      className=\"text-3xl font-bold text-primary\"\n                      data-testid=\"text-property-price\"\n                    >\n                      R$ {Number(property.price).toLocaleString()}\n                      {property.listingType === \"rent\" && (\n                        <span className=\"text-lg\">/mês</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <Separator className=\"my-6\" />\n\n                {/* Property Features */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                  <div className=\"text-center p-4 bg-muted rounded-lg\">\n                    <Home className=\"h-6 w-6 mx-auto mb-2 text-primary\" />\n                    <div className=\"font-semibold\" data-testid=\"text-bedrooms\">\n                      {property.bedrooms}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Quartos</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-muted rounded-lg\">\n                    <Bath className=\"h-6 w-6 mx-auto mb-2 text-primary\" />\n                    <div className=\"font-semibold\" data-testid=\"text-bathrooms\">\n                      {property.bathrooms}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Banheiros\n                    </div>\n                  </div>\n                  <div className=\"text-center p-4 bg-muted rounded-lg\">\n                    <Square className=\"h-6 w-6 mx-auto mb-2 text-primary\" />\n                    <div className=\"font-semibold\" data-testid=\"text-sqft\">\n                      {property.sqft.toLocaleString()}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">m²</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-muted rounded-lg\">\n                    <Car className=\"h-6 w-6 mx-auto mb-2 text-primary\" />\n                    <div\n                      className=\"font-semibold\"\n                      data-testid=\"text-car-spaces\"\n                    >\n                      {property.carSpaces || 1}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Vagas</div>\n                  </div>\n                </div>\n\n                {/* Description */}\n                {property.description && (\n                  <>\n                    <Separator className=\"my-6\" />\n                    <div>\n                      <h3 className=\"text-xl font-semibold mb-3\">Descrição</h3>\n                      <p\n                        className=\"text-muted-foreground leading-relaxed\"\n                        data-testid=\"text-description\"\n                      >\n                        {property.description}\n                      </p>\n                    </div>\n                  </>\n                )}\n\n                {/* Strong Points */}\n                {property.strongPoints && property.strongPoints.length > 0 && (\n                  <>\n                    <Separator className=\"my-6\" />\n\n                    <div>\n                      <h3 className=\"text-xl font-semibold mb-3\">\n                        Pontos Fortes\n                      </h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                        {property.strongPoints.map((point, index) => (\n                          <div\n                            key={index}\n                            className=\"flex items-center gap-2\"\n                            data-testid={`strong-point-${index}`}\n                          >\n                            <div className=\"w-2 h-2 bg-primary rounded-full flex-shrink-0\"></div>\n                            <span className=\"text-muted-foreground\">\n                              {point}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </>\n                )}\n\n                {/* Property Details */}\n                <Separator className=\"my-6\" />\n                <div>\n                  <h3 className=\"text-xl font-semibold mb-4\">\n                    Detalhes do Imóvel\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"flex justify-between py-2 border-b\">\n                      <span className=\"text-muted-foreground\">\n                        Tipo de Imóvel\n                      </span>\n                      <span className=\"font-medium capitalize\">\n                        {property.propertyType}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between py-2 border-b\">\n                      <span className=\"text-muted-foreground\">Tipo</span>\n                      <span className=\"font-medium capitalize\">\n                        {property.listingType}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between py-2 border-b\">\n                      <span className=\"text-muted-foreground\">Cidade</span>\n                      <span className=\"font-medium\">{property.city}</span>\n                    </div>\n                    <div className=\"flex justify-between py-2 border-b\">\n                      <span className=\"text-muted-foreground\">Endereço</span>\n                      <span className=\"font-medium\">{property.state}</span>\n                    </div>\n                    {property.iptu && (\n                      <div className=\"flex justify-between py-2 border-b\">\n                        <span className=\"text-muted-foreground\">IPTU</span>\n                        <span className=\"font-medium\" data-testid=\"text-property-iptu\">\n                          R$ {parseFloat(property.iptu).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Embedded Map */}\n                {property.mapEmbedUrl && (\n                  <>\n                    <Separator className=\"my-6\" />\n                    <div>\n                      <h3 className=\"text-xl font-semibold mb-4\">\n                        Localização\n                      </h3>\n                      <div\n                        className=\"aspect-video w-full rounded-lg overflow-hidden border\"\n                        data-testid=\"map-container\"\n                      >\n                        <iframe\n                          src={property.mapEmbedUrl}\n                          width=\"100%\"\n                          height=\"100%\"\n                          style={{ border: 0 }}\n                          allowFullScreen={true}\n                          loading=\"lazy\"\n                          referrerPolicy=\"no-referrer-when-downgrade\"\n                          title=\"Mapa da propriedade\"\n                          data-testid=\"map-iframe\"\n                        ></iframe>\n                      </div>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Contact Agent */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-semibold mb-4\">Contate-nos</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"text-center\">\n                    <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <Home className=\"h-8 w-8 text-primary\" />\n                    </div>\n                    <h4 className=\"font-semibold\">Corretor da Regal Imóveis</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Especialista em Imóveis\n                    </p>\n                  </div>\n                  <Separator />\n                  <div className=\"space-y-3\">\n                    <Button className=\"w-full\" data-testid=\"button-call-agent\">\n                      <Phone className=\"h-4 w-4 mr-2\" />\n                      Entrar em Contato\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19623},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AdminPanel.tsx":{"content":"import AdminPanel from '../AdminPanel';\n\nexport default function AdminPanelExample() {\n  return <AdminPanel />;\n}","size_bytes":113},"client/src/components/examples/FilterPanel.tsx":{"content":"import FilterPanel from '../FilterPanel';\n\nexport default function FilterPanelExample() {\n  return (\n    <div className=\"max-w-md\">\n      <FilterPanel\n        onFiltersChange={(filters) => console.log('Filters changed:', filters)}\n        onReset={() => console.log('Filters reset')}\n      />\n    </div>\n  );\n}","size_bytes":310},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  return (\n    <Header \n      onSearch={(query) => console.log('Search:', query)}\n      activeTab=\"buy\"\n      onTabChange={(tab) => console.log('Tab changed:', tab)}\n    />\n  );\n}","size_bytes":254},"client/src/components/examples/HeroSection.tsx":{"content":"import HeroSection from '../HeroSection';\n\nexport default function HeroSectionExample() {\n  return (\n    <HeroSection \n      onSearch={(query) => console.log('Hero search:', query)}\n    />\n  );\n}","size_bytes":195},"client/src/components/examples/PropertyCard.tsx":{"content":"import PropertyCard from '../PropertyCard';\nimport heroImage from '@assets/generated_images/Luxury_house_hero_image_f495f766.png';\n\nexport default function PropertyCardExample() {\n  return (\n    <div className=\"max-w-sm\">\n      <PropertyCard\n        id=\"1\"\n        title=\"Modern Luxury Villa\"\n        price=\"$1,250,000\"\n        location=\"Beverly Hills, CA\"\n        image={heroImage}\n        beds={4}\n        baths={3}\n        sqft={2800}\n        parking={2}\n        type=\"sale\"\n        featured={true}\n        onView={(id) => console.log('View property:', id)}\n        onFavorite={(id) => console.log('Favorite property:', id)}\n      />\n    </div>\n  );\n}","size_bytes":654},"client/src/components/examples/PropertyGrid.tsx":{"content":"import PropertyGrid from '../PropertyGrid';\n\nexport default function PropertyGridExample() {\n  return (\n    <div className=\"container mx-auto px-4\">\n      <PropertyGrid\n        searchQuery=\"\"\n        activeTab=\"buy\"\n        onPropertyView={(id) => console.log('View property:', id)}\n      />\n    </div>\n  );\n}","size_bytes":309},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/jsonStorage.ts":{"content":"import fs from 'fs/promises';\nimport path from 'path';\nimport { randomUUID } from 'crypto';\nimport type { IStorage, PropertyFilters } from './storage';\nimport type { \n  User,\n  InsertUser,\n  Property, \n  InsertProperty, \n  UpdateProperty \n} from '@shared/schema';\n\n// JSON storage files\nconst DATA_DIR = 'data';\nconst USERS_FILE = path.join(DATA_DIR, 'users.json');\nconst PROPERTIES_FILE = path.join(DATA_DIR, 'properties.json');\n\n// Ensure data directory exists\nasync function ensureDataDir() {\n  try {\n    await fs.access(DATA_DIR);\n  } catch {\n    await fs.mkdir(DATA_DIR, { recursive: true });\n  }\n}\n\n// Helper functions for file operations\nasync function readJsonFile<T>(filePath: string, defaultValue: T[] = []): Promise<T[]> {\n  try {\n    await ensureDataDir();\n    const data = await fs.readFile(filePath, 'utf-8');\n    return JSON.parse(data);\n  } catch {\n    // File doesn't exist or is invalid, return default value\n    await writeJsonFile(filePath, defaultValue);\n    return defaultValue as T[];\n  }\n}\n\nasync function writeJsonFile<T>(filePath: string, data: T[]): Promise<void> {\n  await ensureDataDir();\n  await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport class JsonStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const users = await readJsonFile<User>(USERS_FILE);\n    return users.find(user => user.id === id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const users = await readJsonFile<User>(USERS_FILE);\n    return users.find(user => user.username === username);\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const users = await readJsonFile<User>(USERS_FILE);\n    \n    const newUser: User = {\n      id: randomUUID(),\n      username: userData.username,\n      email: userData.email || null,\n      password: userData.password,\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      profileImageUrl: userData.profileImageUrl || null,\n      role: userData.role || 'user',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    users.push(newUser);\n    await writeJsonFile(USERS_FILE, users);\n    return newUser;\n  }\n\n  async updateUser(id: string, userData: Partial<User>): Promise<User> {\n    const users = await readJsonFile<User>(USERS_FILE);\n    const userIndex = users.findIndex(user => user.id === id);\n    \n    if (userIndex === -1) {\n      throw new Error(`User with id ${id} not found`);\n    }\n    \n    const updatedUser = {\n      ...users[userIndex],\n      ...userData,\n      updatedAt: new Date(),\n    };\n    \n    users[userIndex] = updatedUser;\n    await writeJsonFile(USERS_FILE, users);\n    return updatedUser;\n  }\n\n  // Property methods\n  async getProperties(filters?: PropertyFilters): Promise<Property[]> {\n    let properties = await readJsonFile<Property>(PROPERTIES_FILE);\n    \n    // Apply filters\n    if (filters) {\n      if (filters.listingType) {\n        properties = properties.filter(p => p.listingType === filters.listingType);\n      }\n      if (filters.propertyType) {\n        properties = properties.filter(p => p.propertyType === filters.propertyType);\n      }\n      if (filters.minPrice) {\n        properties = properties.filter(p => parseFloat(p.price) >= filters.minPrice!);\n      }\n      if (filters.maxPrice) {\n        properties = properties.filter(p => parseFloat(p.price) <= filters.maxPrice!);\n      }\n      if (filters.minBeds) {\n        properties = properties.filter(p => p.bedrooms >= filters.minBeds!);\n      }\n      if (filters.minBaths) {\n        properties = properties.filter(p => p.bathrooms >= filters.minBaths!);\n      }\n      if (filters.city) {\n        properties = properties.filter(p => p.city.toLowerCase().includes(filters.city!.toLowerCase()));\n      }\n      if (filters.state) {\n        properties = properties.filter(p => p.state.toLowerCase().includes(filters.state!.toLowerCase()));\n      }\n      if (filters.featured !== undefined) {\n        properties = properties.filter(p => p.featured === filters.featured);\n      }\n      if (filters.status) {\n        properties = properties.filter(p => p.status === filters.status);\n      }\n\n      // Apply sorting\n      if (filters.sortBy) {\n        switch (filters.sortBy) {\n          case 'price_asc':\n            properties.sort((a, b) => parseFloat(a.price) - parseFloat(b.price));\n            break;\n          case 'price_desc':\n            properties.sort((a, b) => parseFloat(b.price) - parseFloat(a.price));\n            break;\n          case 'newest':\n            properties.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n            break;\n          case 'oldest':\n            properties.sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n            break;\n        }\n      }\n\n      // Apply pagination\n      if (filters.offset) {\n        properties = properties.slice(filters.offset);\n      }\n      if (filters.limit) {\n        properties = properties.slice(0, filters.limit);\n      }\n    }\n    \n    return properties;\n  }\n\n  async getProperty(id: string): Promise<Property | undefined> {\n    const properties = await readJsonFile<Property>(PROPERTIES_FILE);\n    return properties.find(property => property.id === id);\n  }\n\n  async createProperty(propertyData: InsertProperty): Promise<Property> {\n    const properties = await readJsonFile<Property>(PROPERTIES_FILE);\n    \n    const newProperty: Property = {\n      id: randomUUID(),\n      title: propertyData.title,\n      description: propertyData.description || null,\n      price: propertyData.price,\n      location: propertyData.location,\n      address: propertyData.address || null,\n      city: propertyData.city,\n      state: propertyData.state,\n      zipCode: propertyData.zipCode || null,\n      propertyType: propertyData.propertyType,\n      listingType: propertyData.listingType,\n      bedrooms: propertyData.bedrooms,\n      bathrooms: propertyData.bathrooms,\n      sqft: propertyData.sqft,\n      parking: propertyData.parking || 0,\n      yearBuilt: propertyData.yearBuilt || null,\n      lotSize: propertyData.lotSize || null,\n      images: propertyData.images || [],\n      amenities: propertyData.amenities || [],\n      carSpaces: propertyData.carSpaces || 1,\n      strongPoints: propertyData.strongPoints || [],\n      iptu: propertyData.iptu || null, // New IPTU field\n      mapEmbedUrl: propertyData.mapEmbedUrl || null,\n      featured: propertyData.featured || false,\n      status: propertyData.status || 'active',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    properties.push(newProperty);\n    await writeJsonFile(PROPERTIES_FILE, properties);\n    return newProperty;\n  }\n\n  async updateProperty(id: string, updates: UpdateProperty): Promise<Property> {\n    const properties = await readJsonFile<Property>(PROPERTIES_FILE);\n    const propertyIndex = properties.findIndex(property => property.id === id);\n    \n    if (propertyIndex === -1) {\n      throw new Error(`Property with id ${id} not found`);\n    }\n    \n    const updatedProperty = {\n      ...properties[propertyIndex],\n      ...updates,\n      updatedAt: new Date(),\n    };\n    \n    properties[propertyIndex] = updatedProperty;\n    await writeJsonFile(PROPERTIES_FILE, properties);\n    return updatedProperty;\n  }\n\n  async deleteProperty(id: string): Promise<void> {\n    const properties = await readJsonFile<Property>(PROPERTIES_FILE);\n    const filteredProperties = properties.filter(property => property.id !== id);\n    \n    if (properties.length === filteredProperties.length) {\n      throw new Error(`Property with id ${id} not found`);\n    }\n    \n    await writeJsonFile(PROPERTIES_FILE, filteredProperties);\n  }\n\n  async searchProperties(query: string, filters?: PropertyFilters): Promise<Property[]> {\n    const properties = await this.getProperties(filters);\n    \n    if (!query) {\n      return properties;\n    }\n    \n    const searchTerm = query.toLowerCase();\n    \n    return properties.filter(property => \n      property.title.toLowerCase().includes(searchTerm) ||\n      property.description?.toLowerCase().includes(searchTerm) ||\n      property.location.toLowerCase().includes(searchTerm) ||\n      property.address?.toLowerCase().includes(searchTerm) ||\n      property.city.toLowerCase().includes(searchTerm) ||\n      property.state.toLowerCase().includes(searchTerm) ||\n      property.propertyType.toLowerCase().includes(searchTerm) ||\n      property.amenities?.some((amenity: string) => amenity.toLowerCase().includes(searchTerm)) ||\n      property.strongPoints?.some((point: string) => point.toLowerCase().includes(searchTerm))\n    );\n  }\n}","size_bytes":8706}},"version":1}